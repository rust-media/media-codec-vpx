/* automatically generated by rust-bindgen 0.72.0 */

pub const VPX_IMAGE_ABI_VERSION: u32 = 5;
pub const VPX_IMG_FMT_PLANAR: u32 = 256;
pub const VPX_IMG_FMT_UV_FLIP: u32 = 512;
pub const VPX_IMG_FMT_HAS_ALPHA: u32 = 1024;
pub const VPX_IMG_FMT_HIGHBITDEPTH: u32 = 2048;
pub const VPX_PLANE_PACKED: u32 = 0;
pub const VPX_PLANE_Y: u32 = 0;
pub const VPX_PLANE_U: u32 = 1;
pub const VPX_PLANE_V: u32 = 2;
pub const VPX_PLANE_ALPHA: u32 = 3;
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _CRT_HAS_C11: u32 = 1;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const PRId8: &[u8; 4] = b"hhd\0";
pub const PRId16: &[u8; 3] = b"hd\0";
pub const PRId32: &[u8; 2] = b"d\0";
pub const PRId64: &[u8; 4] = b"lld\0";
pub const PRIdLEAST8: &[u8; 4] = b"hhd\0";
pub const PRIdLEAST16: &[u8; 3] = b"hd\0";
pub const PRIdLEAST32: &[u8; 2] = b"d\0";
pub const PRIdLEAST64: &[u8; 4] = b"lld\0";
pub const PRIdFAST8: &[u8; 4] = b"hhd\0";
pub const PRIdFAST16: &[u8; 2] = b"d\0";
pub const PRIdFAST32: &[u8; 2] = b"d\0";
pub const PRIdFAST64: &[u8; 4] = b"lld\0";
pub const PRIdMAX: &[u8; 4] = b"lld\0";
pub const PRIdPTR: &[u8; 4] = b"lld\0";
pub const PRIi8: &[u8; 4] = b"hhi\0";
pub const PRIi16: &[u8; 3] = b"hi\0";
pub const PRIi32: &[u8; 2] = b"i\0";
pub const PRIi64: &[u8; 4] = b"lli\0";
pub const PRIiLEAST8: &[u8; 4] = b"hhi\0";
pub const PRIiLEAST16: &[u8; 3] = b"hi\0";
pub const PRIiLEAST32: &[u8; 2] = b"i\0";
pub const PRIiLEAST64: &[u8; 4] = b"lli\0";
pub const PRIiFAST8: &[u8; 4] = b"hhi\0";
pub const PRIiFAST16: &[u8; 2] = b"i\0";
pub const PRIiFAST32: &[u8; 2] = b"i\0";
pub const PRIiFAST64: &[u8; 4] = b"lli\0";
pub const PRIiMAX: &[u8; 4] = b"lli\0";
pub const PRIiPTR: &[u8; 4] = b"lli\0";
pub const PRIo8: &[u8; 4] = b"hho\0";
pub const PRIo16: &[u8; 3] = b"ho\0";
pub const PRIo32: &[u8; 2] = b"o\0";
pub const PRIo64: &[u8; 4] = b"llo\0";
pub const PRIoLEAST8: &[u8; 4] = b"hho\0";
pub const PRIoLEAST16: &[u8; 3] = b"ho\0";
pub const PRIoLEAST32: &[u8; 2] = b"o\0";
pub const PRIoLEAST64: &[u8; 4] = b"llo\0";
pub const PRIoFAST8: &[u8; 4] = b"hho\0";
pub const PRIoFAST16: &[u8; 2] = b"o\0";
pub const PRIoFAST32: &[u8; 2] = b"o\0";
pub const PRIoFAST64: &[u8; 4] = b"llo\0";
pub const PRIoMAX: &[u8; 4] = b"llo\0";
pub const PRIoPTR: &[u8; 4] = b"llo\0";
pub const PRIu8: &[u8; 4] = b"hhu\0";
pub const PRIu16: &[u8; 3] = b"hu\0";
pub const PRIu32: &[u8; 2] = b"u\0";
pub const PRIu64: &[u8; 4] = b"llu\0";
pub const PRIuLEAST8: &[u8; 4] = b"hhu\0";
pub const PRIuLEAST16: &[u8; 3] = b"hu\0";
pub const PRIuLEAST32: &[u8; 2] = b"u\0";
pub const PRIuLEAST64: &[u8; 4] = b"llu\0";
pub const PRIuFAST8: &[u8; 4] = b"hhu\0";
pub const PRIuFAST16: &[u8; 2] = b"u\0";
pub const PRIuFAST32: &[u8; 2] = b"u\0";
pub const PRIuFAST64: &[u8; 4] = b"llu\0";
pub const PRIuMAX: &[u8; 4] = b"llu\0";
pub const PRIuPTR: &[u8; 4] = b"llu\0";
pub const PRIx8: &[u8; 4] = b"hhx\0";
pub const PRIx16: &[u8; 3] = b"hx\0";
pub const PRIx32: &[u8; 2] = b"x\0";
pub const PRIx64: &[u8; 4] = b"llx\0";
pub const PRIxLEAST8: &[u8; 4] = b"hhx\0";
pub const PRIxLEAST16: &[u8; 3] = b"hx\0";
pub const PRIxLEAST32: &[u8; 2] = b"x\0";
pub const PRIxLEAST64: &[u8; 4] = b"llx\0";
pub const PRIxFAST8: &[u8; 4] = b"hhx\0";
pub const PRIxFAST16: &[u8; 2] = b"x\0";
pub const PRIxFAST32: &[u8; 2] = b"x\0";
pub const PRIxFAST64: &[u8; 4] = b"llx\0";
pub const PRIxMAX: &[u8; 4] = b"llx\0";
pub const PRIxPTR: &[u8; 4] = b"llx\0";
pub const PRIX8: &[u8; 4] = b"hhX\0";
pub const PRIX16: &[u8; 3] = b"hX\0";
pub const PRIX32: &[u8; 2] = b"X\0";
pub const PRIX64: &[u8; 4] = b"llX\0";
pub const PRIXLEAST8: &[u8; 4] = b"hhX\0";
pub const PRIXLEAST16: &[u8; 3] = b"hX\0";
pub const PRIXLEAST32: &[u8; 2] = b"X\0";
pub const PRIXLEAST64: &[u8; 4] = b"llX\0";
pub const PRIXFAST8: &[u8; 4] = b"hhX\0";
pub const PRIXFAST16: &[u8; 2] = b"X\0";
pub const PRIXFAST32: &[u8; 2] = b"X\0";
pub const PRIXFAST64: &[u8; 4] = b"llX\0";
pub const PRIXMAX: &[u8; 4] = b"llX\0";
pub const PRIXPTR: &[u8; 4] = b"llX\0";
pub const SCNd8: &[u8; 4] = b"hhd\0";
pub const SCNd16: &[u8; 3] = b"hd\0";
pub const SCNd32: &[u8; 2] = b"d\0";
pub const SCNd64: &[u8; 4] = b"lld\0";
pub const SCNdLEAST8: &[u8; 4] = b"hhd\0";
pub const SCNdLEAST16: &[u8; 3] = b"hd\0";
pub const SCNdLEAST32: &[u8; 2] = b"d\0";
pub const SCNdLEAST64: &[u8; 4] = b"lld\0";
pub const SCNdFAST8: &[u8; 4] = b"hhd\0";
pub const SCNdFAST16: &[u8; 2] = b"d\0";
pub const SCNdFAST32: &[u8; 2] = b"d\0";
pub const SCNdFAST64: &[u8; 4] = b"lld\0";
pub const SCNdMAX: &[u8; 4] = b"lld\0";
pub const SCNdPTR: &[u8; 4] = b"lld\0";
pub const SCNi8: &[u8; 4] = b"hhi\0";
pub const SCNi16: &[u8; 3] = b"hi\0";
pub const SCNi32: &[u8; 2] = b"i\0";
pub const SCNi64: &[u8; 4] = b"lli\0";
pub const SCNiLEAST8: &[u8; 4] = b"hhi\0";
pub const SCNiLEAST16: &[u8; 3] = b"hi\0";
pub const SCNiLEAST32: &[u8; 2] = b"i\0";
pub const SCNiLEAST64: &[u8; 4] = b"lli\0";
pub const SCNiFAST8: &[u8; 4] = b"hhi\0";
pub const SCNiFAST16: &[u8; 2] = b"i\0";
pub const SCNiFAST32: &[u8; 2] = b"i\0";
pub const SCNiFAST64: &[u8; 4] = b"lli\0";
pub const SCNiMAX: &[u8; 4] = b"lli\0";
pub const SCNiPTR: &[u8; 4] = b"lli\0";
pub const SCNo8: &[u8; 4] = b"hho\0";
pub const SCNo16: &[u8; 3] = b"ho\0";
pub const SCNo32: &[u8; 2] = b"o\0";
pub const SCNo64: &[u8; 4] = b"llo\0";
pub const SCNoLEAST8: &[u8; 4] = b"hho\0";
pub const SCNoLEAST16: &[u8; 3] = b"ho\0";
pub const SCNoLEAST32: &[u8; 2] = b"o\0";
pub const SCNoLEAST64: &[u8; 4] = b"llo\0";
pub const SCNoFAST8: &[u8; 4] = b"hho\0";
pub const SCNoFAST16: &[u8; 2] = b"o\0";
pub const SCNoFAST32: &[u8; 2] = b"o\0";
pub const SCNoFAST64: &[u8; 4] = b"llo\0";
pub const SCNoMAX: &[u8; 4] = b"llo\0";
pub const SCNoPTR: &[u8; 4] = b"llo\0";
pub const SCNu8: &[u8; 4] = b"hhu\0";
pub const SCNu16: &[u8; 3] = b"hu\0";
pub const SCNu32: &[u8; 2] = b"u\0";
pub const SCNu64: &[u8; 4] = b"llu\0";
pub const SCNuLEAST8: &[u8; 4] = b"hhu\0";
pub const SCNuLEAST16: &[u8; 3] = b"hu\0";
pub const SCNuLEAST32: &[u8; 2] = b"u\0";
pub const SCNuLEAST64: &[u8; 4] = b"llu\0";
pub const SCNuFAST8: &[u8; 4] = b"hhu\0";
pub const SCNuFAST16: &[u8; 2] = b"u\0";
pub const SCNuFAST32: &[u8; 2] = b"u\0";
pub const SCNuFAST64: &[u8; 4] = b"llu\0";
pub const SCNuMAX: &[u8; 4] = b"llu\0";
pub const SCNuPTR: &[u8; 4] = b"llu\0";
pub const SCNx8: &[u8; 4] = b"hhx\0";
pub const SCNx16: &[u8; 3] = b"hx\0";
pub const SCNx32: &[u8; 2] = b"x\0";
pub const SCNx64: &[u8; 4] = b"llx\0";
pub const SCNxLEAST8: &[u8; 4] = b"hhx\0";
pub const SCNxLEAST16: &[u8; 3] = b"hx\0";
pub const SCNxLEAST32: &[u8; 2] = b"x\0";
pub const SCNxLEAST64: &[u8; 4] = b"llx\0";
pub const SCNxFAST8: &[u8; 4] = b"hhx\0";
pub const SCNxFAST16: &[u8; 2] = b"x\0";
pub const SCNxFAST32: &[u8; 2] = b"x\0";
pub const SCNxFAST64: &[u8; 4] = b"llx\0";
pub const SCNxMAX: &[u8; 4] = b"llx\0";
pub const SCNxPTR: &[u8; 4] = b"llx\0";
pub const VPX_CODEC_ABI_VERSION: u32 = 9;
pub const VPX_CODEC_CAP_DECODER: u32 = 1;
pub const VPX_CODEC_CAP_ENCODER: u32 = 2;
pub const VPX_CODEC_CAP_HIGHBITDEPTH: u32 = 4;
pub const VPX_TPL_ABI_VERSION: u32 = 4;
pub const VPX_EXT_RATECTRL_ABI_VERSION: u32 = 10;
pub const VPX_RC_MAX_STATIC_GF_GROUP_LENGTH: u32 = 250;
pub const VPX_RC_MAX_REF_FRAMES: u32 = 4;
pub const VPX_DEFAULT_Q: i32 = -1;
pub const VPX_DEFAULT_RDMULT: i32 = -1;
pub const VPX_TS_MAX_PERIODICITY: u32 = 16;
pub const VPX_TS_MAX_LAYERS: u32 = 5;
pub const VPX_MAX_LAYERS: u32 = 12;
pub const VPX_SS_MAX_LAYERS: u32 = 5;
pub const VPX_SS_DEFAULT_LAYERS: u32 = 1;
pub const VPX_ENCODER_ABI_VERSION: u32 = 37;
pub const VPX_CODEC_CAP_PSNR: u32 = 65536;
pub const VPX_CODEC_CAP_OUTPUT_PARTITION: u32 = 131072;
pub const VPX_CODEC_USE_PSNR: u32 = 65536;
pub const VPX_CODEC_USE_OUTPUT_PARTITION: u32 = 131072;
pub const VPX_CODEC_USE_HIGHBITDEPTH: u32 = 262144;
pub const VPX_FRAME_IS_KEY: u32 = 1;
pub const VPX_FRAME_IS_DROPPABLE: u32 = 2;
pub const VPX_FRAME_IS_INVISIBLE: u32 = 4;
pub const VPX_FRAME_IS_FRAGMENT: u32 = 8;
pub const VPX_ERROR_RESILIENT_DEFAULT: u32 = 1;
pub const VPX_ERROR_RESILIENT_PARTITIONS: u32 = 2;
pub const VPX_EFLAG_FORCE_KF: u32 = 1;
pub const VPX_DL_REALTIME: u32 = 1;
pub const VPX_DL_GOOD_QUALITY: u32 = 1000000;
pub const VPX_DL_BEST_QUALITY: u32 = 0;
pub const VP8_EFLAG_NO_REF_LAST: u32 = 65536;
pub const VP8_EFLAG_NO_REF_GF: u32 = 131072;
pub const VP8_EFLAG_NO_REF_ARF: u32 = 2097152;
pub const VP8_EFLAG_NO_UPD_LAST: u32 = 262144;
pub const VP8_EFLAG_NO_UPD_GF: u32 = 4194304;
pub const VP8_EFLAG_NO_UPD_ARF: u32 = 8388608;
pub const VP8_EFLAG_FORCE_GF: u32 = 524288;
pub const VP8_EFLAG_FORCE_ARF: u32 = 16777216;
pub const VP8_EFLAG_NO_UPD_ENTROPY: u32 = 1048576;
pub const VPX_MAXIMUM_WORK_BUFFERS: u32 = 8;
pub const VP9_MAXIMUM_REF_BUFFERS: u32 = 8;
pub const VPX_DECODER_ABI_VERSION: u32 = 12;
pub const VPX_CODEC_CAP_PUT_SLICE: u32 = 65536;
pub const VPX_CODEC_CAP_PUT_FRAME: u32 = 131072;
pub const VPX_CODEC_CAP_POSTPROC: u32 = 262144;
pub const VPX_CODEC_CAP_ERROR_CONCEALMENT: u32 = 524288;
pub const VPX_CODEC_CAP_INPUT_FRAGMENTS: u32 = 1048576;
pub const VPX_CODEC_CAP_FRAME_THREADING: u32 = 2097152;
pub const VPX_CODEC_CAP_EXTERNAL_FRAME_BUFFER: u32 = 4194304;
pub const VPX_CODEC_USE_POSTPROC: u32 = 65536;
pub const VPX_CODEC_USE_ERROR_CONCEALMENT: u32 = 131072;
pub const VPX_CODEC_USE_INPUT_FRAGMENTS: u32 = 262144;
pub const VPX_CODEC_USE_FRAME_THREADING: u32 = 524288;
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum vpx_img_fmt {
    VPX_IMG_FMT_NONE = 0,
    VPX_IMG_FMT_YV12 = 769,
    VPX_IMG_FMT_I420 = 258,
    VPX_IMG_FMT_I422 = 261,
    VPX_IMG_FMT_I444 = 262,
    VPX_IMG_FMT_I440 = 263,
    VPX_IMG_FMT_NV12 = 265,
    VPX_IMG_FMT_I42016 = 2306,
    VPX_IMG_FMT_I42216 = 2309,
    VPX_IMG_FMT_I44416 = 2310,
    VPX_IMG_FMT_I44016 = 2311,
}
pub use self::vpx_img_fmt as vpx_img_fmt_t;
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum vpx_color_space {
    VPX_CS_UNKNOWN = 0,
    VPX_CS_BT_601 = 1,
    VPX_CS_BT_709 = 2,
    VPX_CS_SMPTE_170 = 3,
    VPX_CS_SMPTE_240 = 4,
    VPX_CS_BT_2020 = 5,
    VPX_CS_RESERVED = 6,
    VPX_CS_SRGB = 7,
}
pub use self::vpx_color_space as vpx_color_space_t;
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum vpx_color_range {
    VPX_CR_STUDIO_RANGE = 0,
    VPX_CR_FULL_RANGE = 1,
}
pub use self::vpx_color_range as vpx_color_range_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vpx_image {
    pub fmt: vpx_img_fmt_t,
    pub cs: vpx_color_space_t,
    pub range: vpx_color_range_t,
    pub w: ::std::os::raw::c_uint,
    pub h: ::std::os::raw::c_uint,
    pub bit_depth: ::std::os::raw::c_uint,
    pub d_w: ::std::os::raw::c_uint,
    pub d_h: ::std::os::raw::c_uint,
    pub r_w: ::std::os::raw::c_uint,
    pub r_h: ::std::os::raw::c_uint,
    pub x_chroma_shift: ::std::os::raw::c_uint,
    pub y_chroma_shift: ::std::os::raw::c_uint,
    pub planes: [*mut ::std::os::raw::c_uchar; 4usize],
    pub stride: [::std::os::raw::c_int; 4usize],
    pub bps: ::std::os::raw::c_int,
    pub user_priv: *mut ::std::os::raw::c_void,
    pub img_data: *mut ::std::os::raw::c_uchar,
    pub img_data_owner: ::std::os::raw::c_int,
    pub self_allocd: ::std::os::raw::c_int,
    pub fb_priv: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vpx_image"][::std::mem::size_of::<vpx_image>() - 136usize];
    ["Alignment of vpx_image"][::std::mem::align_of::<vpx_image>() - 8usize];
    ["Offset of field: vpx_image::fmt"][::std::mem::offset_of!(vpx_image, fmt) - 0usize];
    ["Offset of field: vpx_image::cs"][::std::mem::offset_of!(vpx_image, cs) - 4usize];
    ["Offset of field: vpx_image::range"][::std::mem::offset_of!(vpx_image, range) - 8usize];
    ["Offset of field: vpx_image::w"][::std::mem::offset_of!(vpx_image, w) - 12usize];
    ["Offset of field: vpx_image::h"][::std::mem::offset_of!(vpx_image, h) - 16usize];
    ["Offset of field: vpx_image::bit_depth"][::std::mem::offset_of!(vpx_image, bit_depth) - 20usize];
    ["Offset of field: vpx_image::d_w"][::std::mem::offset_of!(vpx_image, d_w) - 24usize];
    ["Offset of field: vpx_image::d_h"][::std::mem::offset_of!(vpx_image, d_h) - 28usize];
    ["Offset of field: vpx_image::r_w"][::std::mem::offset_of!(vpx_image, r_w) - 32usize];
    ["Offset of field: vpx_image::r_h"][::std::mem::offset_of!(vpx_image, r_h) - 36usize];
    ["Offset of field: vpx_image::x_chroma_shift"][::std::mem::offset_of!(vpx_image, x_chroma_shift) - 40usize];
    ["Offset of field: vpx_image::y_chroma_shift"][::std::mem::offset_of!(vpx_image, y_chroma_shift) - 44usize];
    ["Offset of field: vpx_image::planes"][::std::mem::offset_of!(vpx_image, planes) - 48usize];
    ["Offset of field: vpx_image::stride"][::std::mem::offset_of!(vpx_image, stride) - 80usize];
    ["Offset of field: vpx_image::bps"][::std::mem::offset_of!(vpx_image, bps) - 96usize];
    ["Offset of field: vpx_image::user_priv"][::std::mem::offset_of!(vpx_image, user_priv) - 104usize];
    ["Offset of field: vpx_image::img_data"][::std::mem::offset_of!(vpx_image, img_data) - 112usize];
    ["Offset of field: vpx_image::img_data_owner"][::std::mem::offset_of!(vpx_image, img_data_owner) - 120usize];
    ["Offset of field: vpx_image::self_allocd"][::std::mem::offset_of!(vpx_image, self_allocd) - 124usize];
    ["Offset of field: vpx_image::fb_priv"][::std::mem::offset_of!(vpx_image, fb_priv) - 128usize];
};
pub type vpx_image_t = vpx_image;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vpx_image_rect {
    pub x: ::std::os::raw::c_uint,
    pub y: ::std::os::raw::c_uint,
    pub w: ::std::os::raw::c_uint,
    pub h: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vpx_image_rect"][::std::mem::size_of::<vpx_image_rect>() - 16usize];
    ["Alignment of vpx_image_rect"][::std::mem::align_of::<vpx_image_rect>() - 4usize];
    ["Offset of field: vpx_image_rect::x"][::std::mem::offset_of!(vpx_image_rect, x) - 0usize];
    ["Offset of field: vpx_image_rect::y"][::std::mem::offset_of!(vpx_image_rect, y) - 4usize];
    ["Offset of field: vpx_image_rect::w"][::std::mem::offset_of!(vpx_image_rect, w) - 8usize];
    ["Offset of field: vpx_image_rect::h"][::std::mem::offset_of!(vpx_image_rect, h) - 12usize];
};
pub type vpx_image_rect_t = vpx_image_rect;
unsafe extern "C" {
    pub fn vpx_img_alloc(
        img: *mut vpx_image_t,
        fmt: vpx_img_fmt_t,
        d_w: ::std::os::raw::c_uint,
        d_h: ::std::os::raw::c_uint,
        align: ::std::os::raw::c_uint,
    ) -> *mut vpx_image_t;
}
unsafe extern "C" {
    pub fn vpx_img_wrap(
        img: *mut vpx_image_t,
        fmt: vpx_img_fmt_t,
        d_w: ::std::os::raw::c_uint,
        d_h: ::std::os::raw::c_uint,
        stride_align: ::std::os::raw::c_uint,
        img_data: *mut ::std::os::raw::c_uchar,
    ) -> *mut vpx_image_t;
}
unsafe extern "C" {
    pub fn vpx_img_set_rect(
        img: *mut vpx_image_t,
        x: ::std::os::raw::c_uint,
        y: ::std::os::raw::c_uint,
        w: ::std::os::raw::c_uint,
        h: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vpx_img_flip(img: *mut vpx_image_t);
}
unsafe extern "C" {
    pub fn vpx_img_free(img: *mut vpx_image_t);
}
pub type va_list = *mut ::std::os::raw::c_char;
unsafe extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
unsafe extern "C" {
    pub fn __security_init_cookie();
}
unsafe extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
unsafe extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize) -> !;
}
unsafe extern "C" {
    pub static mut __security_cookie: usize;
}
pub type __crt_bool = bool;
unsafe extern "C" {
    pub fn _invalid_parameter_noinfo();
}
unsafe extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn() -> !;
}
unsafe extern "C" {
    pub fn _invoke_watson(
        _Expression: *const wchar_t,
        _FunctionName: *const wchar_t,
        _FileName: *const wchar_t,
        _LineNo: ::std::os::raw::c_uint,
        _Reserved: usize,
    ) -> !;
}
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __crt_locale_data_public"][::std::mem::size_of::<__crt_locale_data_public>() - 16usize];
    ["Alignment of __crt_locale_data_public"][::std::mem::align_of::<__crt_locale_data_public>() - 8usize];
    ["Offset of field: __crt_locale_data_public::_locale_pctype"][::std::mem::offset_of!(__crt_locale_data_public, _locale_pctype) - 0usize];
    ["Offset of field: __crt_locale_data_public::_locale_mb_cur_max"][::std::mem::offset_of!(__crt_locale_data_public, _locale_mb_cur_max) - 8usize];
    ["Offset of field: __crt_locale_data_public::_locale_lc_codepage"]
        [::std::mem::offset_of!(__crt_locale_data_public, _locale_lc_codepage) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __crt_locale_pointers"][::std::mem::size_of::<__crt_locale_pointers>() - 16usize];
    ["Alignment of __crt_locale_pointers"][::std::mem::align_of::<__crt_locale_pointers>() - 8usize];
    ["Offset of field: __crt_locale_pointers::locinfo"][::std::mem::offset_of!(__crt_locale_pointers, locinfo) - 0usize];
    ["Offset of field: __crt_locale_pointers::mbcinfo"][::std::mem::offset_of!(__crt_locale_pointers, mbcinfo) - 8usize];
};
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _Mbstatet"][::std::mem::size_of::<_Mbstatet>() - 8usize];
    ["Alignment of _Mbstatet"][::std::mem::align_of::<_Mbstatet>() - 4usize];
    ["Offset of field: _Mbstatet::_Wchar"][::std::mem::offset_of!(_Mbstatet, _Wchar) - 0usize];
    ["Offset of field: _Mbstatet::_Byte"][::std::mem::offset_of!(_Mbstatet, _Byte) - 4usize];
    ["Offset of field: _Mbstatet::_State"][::std::mem::offset_of!(_Mbstatet, _State) - 6usize];
};
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = usize;
unsafe extern "C" {
    pub fn _errno() -> *mut ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _set_errno(_Value: ::std::os::raw::c_int) -> errno_t;
}
unsafe extern "C" {
    pub fn _get_errno(_Value: *mut ::std::os::raw::c_int) -> errno_t;
}
unsafe extern "C" {
    pub fn __threadid() -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn __threadhandle() -> usize;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Lldiv_t {
    pub quot: intmax_t,
    pub rem: intmax_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _Lldiv_t"][::std::mem::size_of::<_Lldiv_t>() - 16usize];
    ["Alignment of _Lldiv_t"][::std::mem::align_of::<_Lldiv_t>() - 8usize];
    ["Offset of field: _Lldiv_t::quot"][::std::mem::offset_of!(_Lldiv_t, quot) - 0usize];
    ["Offset of field: _Lldiv_t::rem"][::std::mem::offset_of!(_Lldiv_t, rem) - 8usize];
};
pub type imaxdiv_t = _Lldiv_t;
unsafe extern "C" {
    pub fn imaxabs(_Number: intmax_t) -> intmax_t;
}
unsafe extern "C" {
    pub fn imaxdiv(_Numerator: intmax_t, _Denominator: intmax_t) -> imaxdiv_t;
}
unsafe extern "C" {
    pub fn strtoimax(_String: *const ::std::os::raw::c_char, _EndPtr: *mut *mut ::std::os::raw::c_char, _Radix: ::std::os::raw::c_int) -> intmax_t;
}
unsafe extern "C" {
    pub fn _strtoimax_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> intmax_t;
}
unsafe extern "C" {
    pub fn strtoumax(_String: *const ::std::os::raw::c_char, _EndPtr: *mut *mut ::std::os::raw::c_char, _Radix: ::std::os::raw::c_int) -> uintmax_t;
}
unsafe extern "C" {
    pub fn _strtoumax_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> uintmax_t;
}
unsafe extern "C" {
    pub fn wcstoimax(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t, _Radix: ::std::os::raw::c_int) -> intmax_t;
}
unsafe extern "C" {
    pub fn _wcstoimax_l(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t, _Radix: ::std::os::raw::c_int, _Locale: _locale_t) -> intmax_t;
}
unsafe extern "C" {
    pub fn wcstoumax(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t, _Radix: ::std::os::raw::c_int) -> uintmax_t;
}
unsafe extern "C" {
    pub fn _wcstoumax_l(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t, _Radix: ::std::os::raw::c_int, _Locale: _locale_t) -> uintmax_t;
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum vpx_codec_err_t {
    VPX_CODEC_OK = 0,
    VPX_CODEC_ERROR = 1,
    VPX_CODEC_MEM_ERROR = 2,
    VPX_CODEC_ABI_MISMATCH = 3,
    VPX_CODEC_INCAPABLE = 4,
    VPX_CODEC_UNSUP_BITSTREAM = 5,
    VPX_CODEC_UNSUP_FEATURE = 6,
    VPX_CODEC_CORRUPT_FRAME = 7,
    VPX_CODEC_INVALID_PARAM = 8,
    VPX_CODEC_LIST_END = 9,
}
pub type vpx_codec_caps_t = ::std::os::raw::c_long;
pub type vpx_codec_flags_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vpx_codec_iface {
    _unused: [u8; 0],
}
pub type vpx_codec_iface_t = vpx_codec_iface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vpx_codec_priv {
    _unused: [u8; 0],
}
pub type vpx_codec_priv_t = vpx_codec_priv;
pub type vpx_codec_iter_t = *const ::std::os::raw::c_void;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct vpx_codec_ctx {
    pub name: *const ::std::os::raw::c_char,
    pub iface: *const vpx_codec_iface,
    pub err: vpx_codec_err_t,
    pub err_detail: *const ::std::os::raw::c_char,
    pub init_flags: vpx_codec_flags_t,
    pub config: vpx_codec_ctx__bindgen_ty_1,
    pub priv_: *mut vpx_codec_priv_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vpx_codec_ctx__bindgen_ty_1 {
    pub dec: *const vpx_codec_dec_cfg,
    pub enc: *const vpx_codec_enc_cfg,
    pub raw: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vpx_codec_ctx__bindgen_ty_1"][::std::mem::size_of::<vpx_codec_ctx__bindgen_ty_1>() - 8usize];
    ["Alignment of vpx_codec_ctx__bindgen_ty_1"][::std::mem::align_of::<vpx_codec_ctx__bindgen_ty_1>() - 8usize];
    ["Offset of field: vpx_codec_ctx__bindgen_ty_1::dec"][::std::mem::offset_of!(vpx_codec_ctx__bindgen_ty_1, dec) - 0usize];
    ["Offset of field: vpx_codec_ctx__bindgen_ty_1::enc"][::std::mem::offset_of!(vpx_codec_ctx__bindgen_ty_1, enc) - 0usize];
    ["Offset of field: vpx_codec_ctx__bindgen_ty_1::raw"][::std::mem::offset_of!(vpx_codec_ctx__bindgen_ty_1, raw) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vpx_codec_ctx"][::std::mem::size_of::<vpx_codec_ctx>() - 56usize];
    ["Alignment of vpx_codec_ctx"][::std::mem::align_of::<vpx_codec_ctx>() - 8usize];
    ["Offset of field: vpx_codec_ctx::name"][::std::mem::offset_of!(vpx_codec_ctx, name) - 0usize];
    ["Offset of field: vpx_codec_ctx::iface"][::std::mem::offset_of!(vpx_codec_ctx, iface) - 8usize];
    ["Offset of field: vpx_codec_ctx::err"][::std::mem::offset_of!(vpx_codec_ctx, err) - 16usize];
    ["Offset of field: vpx_codec_ctx::err_detail"][::std::mem::offset_of!(vpx_codec_ctx, err_detail) - 24usize];
    ["Offset of field: vpx_codec_ctx::init_flags"][::std::mem::offset_of!(vpx_codec_ctx, init_flags) - 32usize];
    ["Offset of field: vpx_codec_ctx::config"][::std::mem::offset_of!(vpx_codec_ctx, config) - 40usize];
    ["Offset of field: vpx_codec_ctx::priv_"][::std::mem::offset_of!(vpx_codec_ctx, priv_) - 48usize];
};
pub type vpx_codec_ctx_t = vpx_codec_ctx;
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum vpx_bit_depth {
    VPX_BITS_8 = 8,
    VPX_BITS_10 = 10,
    VPX_BITS_12 = 12,
}
pub use self::vpx_bit_depth as vpx_bit_depth_t;
unsafe extern "C" {
    pub fn vpx_codec_version() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vpx_codec_version_str() -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn vpx_codec_version_extra_str() -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn vpx_codec_build_config() -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn vpx_codec_iface_name(iface: *const vpx_codec_iface) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn vpx_codec_err_to_string(err: vpx_codec_err_t) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn vpx_codec_error(ctx: *const vpx_codec_ctx_t) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn vpx_codec_error_detail(ctx: *const vpx_codec_ctx_t) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn vpx_codec_destroy(ctx: *mut vpx_codec_ctx_t) -> vpx_codec_err_t;
}
unsafe extern "C" {
    pub fn vpx_codec_get_caps(iface: *const vpx_codec_iface) -> vpx_codec_caps_t;
}
unsafe extern "C" {
    pub fn vpx_codec_control_(ctx: *mut vpx_codec_ctx_t, ctrl_id: ::std::os::raw::c_int, ...) -> vpx_codec_err_t;
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum vp8_com_control_id {
    VP8_SET_REFERENCE = 1,
    VP8_COPY_REFERENCE = 2,
    VP8_SET_POSTPROC = 3,
    VP9_GET_REFERENCE = 128,
    VP8_COMMON_CTRL_ID_MAX = 129,
    VP8_DECODER_CTRL_ID_START = 256,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum vp8_postproc_level {
    VP8_NOFILTERING = 0,
    VP8_DEBLOCK = 1,
    VP8_DEMACROBLOCK = 2,
    VP8_ADDNOISE = 4,
    VP8_MFQE = 8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vp8_postproc_cfg {
    pub post_proc_flag: ::std::os::raw::c_int,
    pub deblocking_level: ::std::os::raw::c_int,
    pub noise_level: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vp8_postproc_cfg"][::std::mem::size_of::<vp8_postproc_cfg>() - 12usize];
    ["Alignment of vp8_postproc_cfg"][::std::mem::align_of::<vp8_postproc_cfg>() - 4usize];
    ["Offset of field: vp8_postproc_cfg::post_proc_flag"][::std::mem::offset_of!(vp8_postproc_cfg, post_proc_flag) - 0usize];
    ["Offset of field: vp8_postproc_cfg::deblocking_level"][::std::mem::offset_of!(vp8_postproc_cfg, deblocking_level) - 4usize];
    ["Offset of field: vp8_postproc_cfg::noise_level"][::std::mem::offset_of!(vp8_postproc_cfg, noise_level) - 8usize];
};
pub type vp8_postproc_cfg_t = vp8_postproc_cfg;
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum vpx_ref_frame_type {
    VP8_LAST_FRAME = 1,
    VP8_GOLD_FRAME = 2,
    VP8_ALTR_FRAME = 4,
}
pub use self::vpx_ref_frame_type as vpx_ref_frame_type_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vpx_ref_frame {
    pub frame_type: vpx_ref_frame_type_t,
    pub img: vpx_image_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vpx_ref_frame"][::std::mem::size_of::<vpx_ref_frame>() - 144usize];
    ["Alignment of vpx_ref_frame"][::std::mem::align_of::<vpx_ref_frame>() - 8usize];
    ["Offset of field: vpx_ref_frame::frame_type"][::std::mem::offset_of!(vpx_ref_frame, frame_type) - 0usize];
    ["Offset of field: vpx_ref_frame::img"][::std::mem::offset_of!(vpx_ref_frame, img) - 8usize];
};
pub type vpx_ref_frame_t = vpx_ref_frame;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vp9_ref_frame {
    pub idx: ::std::os::raw::c_int,
    pub img: vpx_image_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vp9_ref_frame"][::std::mem::size_of::<vp9_ref_frame>() - 144usize];
    ["Alignment of vp9_ref_frame"][::std::mem::align_of::<vp9_ref_frame>() - 8usize];
    ["Offset of field: vp9_ref_frame::idx"][::std::mem::offset_of!(vp9_ref_frame, idx) - 0usize];
    ["Offset of field: vp9_ref_frame::img"][::std::mem::offset_of!(vp9_ref_frame, img) - 8usize];
};
pub type vp9_ref_frame_t = vp9_ref_frame;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VpxTplBlockStats {
    pub row: i16,
    pub col: i16,
    pub intra_cost: i64,
    pub inter_cost: i64,
    pub mv_r: i16,
    pub mv_c: i16,
    pub srcrf_rate: i64,
    pub srcrf_dist: i64,
    pub inter_pred_err: i64,
    pub intra_pred_err: i64,
    pub ref_frame_index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VpxTplBlockStats"][::std::mem::size_of::<VpxTplBlockStats>() - 72usize];
    ["Alignment of VpxTplBlockStats"][::std::mem::align_of::<VpxTplBlockStats>() - 8usize];
    ["Offset of field: VpxTplBlockStats::row"][::std::mem::offset_of!(VpxTplBlockStats, row) - 0usize];
    ["Offset of field: VpxTplBlockStats::col"][::std::mem::offset_of!(VpxTplBlockStats, col) - 2usize];
    ["Offset of field: VpxTplBlockStats::intra_cost"][::std::mem::offset_of!(VpxTplBlockStats, intra_cost) - 8usize];
    ["Offset of field: VpxTplBlockStats::inter_cost"][::std::mem::offset_of!(VpxTplBlockStats, inter_cost) - 16usize];
    ["Offset of field: VpxTplBlockStats::mv_r"][::std::mem::offset_of!(VpxTplBlockStats, mv_r) - 24usize];
    ["Offset of field: VpxTplBlockStats::mv_c"][::std::mem::offset_of!(VpxTplBlockStats, mv_c) - 26usize];
    ["Offset of field: VpxTplBlockStats::srcrf_rate"][::std::mem::offset_of!(VpxTplBlockStats, srcrf_rate) - 32usize];
    ["Offset of field: VpxTplBlockStats::srcrf_dist"][::std::mem::offset_of!(VpxTplBlockStats, srcrf_dist) - 40usize];
    ["Offset of field: VpxTplBlockStats::inter_pred_err"][::std::mem::offset_of!(VpxTplBlockStats, inter_pred_err) - 48usize];
    ["Offset of field: VpxTplBlockStats::intra_pred_err"][::std::mem::offset_of!(VpxTplBlockStats, intra_pred_err) - 56usize];
    ["Offset of field: VpxTplBlockStats::ref_frame_index"][::std::mem::offset_of!(VpxTplBlockStats, ref_frame_index) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VpxTplFrameStats {
    pub frame_width: ::std::os::raw::c_int,
    pub frame_height: ::std::os::raw::c_int,
    pub num_blocks: ::std::os::raw::c_int,
    pub block_stats_list: *mut VpxTplBlockStats,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VpxTplFrameStats"][::std::mem::size_of::<VpxTplFrameStats>() - 24usize];
    ["Alignment of VpxTplFrameStats"][::std::mem::align_of::<VpxTplFrameStats>() - 8usize];
    ["Offset of field: VpxTplFrameStats::frame_width"][::std::mem::offset_of!(VpxTplFrameStats, frame_width) - 0usize];
    ["Offset of field: VpxTplFrameStats::frame_height"][::std::mem::offset_of!(VpxTplFrameStats, frame_height) - 4usize];
    ["Offset of field: VpxTplFrameStats::num_blocks"][::std::mem::offset_of!(VpxTplFrameStats, num_blocks) - 8usize];
    ["Offset of field: VpxTplFrameStats::block_stats_list"][::std::mem::offset_of!(VpxTplFrameStats, block_stats_list) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VpxTplGopStats {
    pub size: ::std::os::raw::c_int,
    pub frame_stats_list: *mut VpxTplFrameStats,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VpxTplGopStats"][::std::mem::size_of::<VpxTplGopStats>() - 16usize];
    ["Alignment of VpxTplGopStats"][::std::mem::align_of::<VpxTplGopStats>() - 8usize];
    ["Offset of field: VpxTplGopStats::size"][::std::mem::offset_of!(VpxTplGopStats, size) - 0usize];
    ["Offset of field: VpxTplGopStats::frame_stats_list"][::std::mem::offset_of!(VpxTplGopStats, frame_stats_list) - 8usize];
};
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum vpx_rc_type {
    VPX_RC_NONE = 0,
    VPX_RC_QP = 1,
    VPX_RC_GOP = 2,
    VPX_RC_RDMULT = 4,
    VPX_RC_GOP_QP = 3,
    VPX_RC_GOP_QP_RDMULT = 7,
}
pub use self::vpx_rc_type as vpx_rc_type_t;
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum vpx_ext_rc_mode {
    VPX_RC_QMODE = 0,
    VPX_RC_VBR = 1,
    VPX_RC_CQ = 2,
}
pub use self::vpx_ext_rc_mode as vpx_ext_rc_mode_t;
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum vpx_rc_frame_update_type {
    VPX_RC_INVALID_UPDATE_TYPE = -1,
    VPX_RC_KF_UPDATE = 0,
    VPX_RC_LF_UPDATE = 1,
    VPX_RC_GF_UPDATE = 2,
    VPX_RC_ARF_UPDATE = 3,
    VPX_RC_OVERLAY_UPDATE = 4,
    VPX_RC_MID_OVERLAY_UPDATE = 5,
    VPX_RC_USE_BUF_FRAME = 6,
}
pub use self::vpx_rc_frame_update_type as vpx_rc_frame_update_type_t;
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum vpx_rc_ref_name {
    VPX_RC_INVALID_REF_FRAME = -1,
    VPX_RC_INTRA_FRAME = 0,
    VPX_RC_LAST_FRAME = 1,
    VPX_RC_GOLDEN_FRAME = 2,
    VPX_RC_ALTREF_FRAME = 3,
}
pub use self::vpx_rc_ref_name as vpx_rc_ref_name_t;
pub type vpx_rc_model_t = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vpx_rc_encodeframe_decision {
    pub q_index: ::std::os::raw::c_int,
    pub rdmult: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vpx_rc_encodeframe_decision"][::std::mem::size_of::<vpx_rc_encodeframe_decision>() - 8usize];
    ["Alignment of vpx_rc_encodeframe_decision"][::std::mem::align_of::<vpx_rc_encodeframe_decision>() - 4usize];
    ["Offset of field: vpx_rc_encodeframe_decision::q_index"][::std::mem::offset_of!(vpx_rc_encodeframe_decision, q_index) - 0usize];
    ["Offset of field: vpx_rc_encodeframe_decision::rdmult"][::std::mem::offset_of!(vpx_rc_encodeframe_decision, rdmult) - 4usize];
};
pub type vpx_rc_encodeframe_decision_t = vpx_rc_encodeframe_decision;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vpx_rc_encodeframe_info {
    pub frame_type: ::std::os::raw::c_int,
    pub show_index: ::std::os::raw::c_int,
    pub coding_index: ::std::os::raw::c_int,
    pub gop_index: ::std::os::raw::c_int,
    pub ref_frame_coding_indexes: [::std::os::raw::c_int; 3usize],
    pub ref_frame_valid_list: [::std::os::raw::c_int; 3usize],
    pub gop_size: ::std::os::raw::c_int,
    pub use_alt_ref: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vpx_rc_encodeframe_info"][::std::mem::size_of::<vpx_rc_encodeframe_info>() - 48usize];
    ["Alignment of vpx_rc_encodeframe_info"][::std::mem::align_of::<vpx_rc_encodeframe_info>() - 4usize];
    ["Offset of field: vpx_rc_encodeframe_info::frame_type"][::std::mem::offset_of!(vpx_rc_encodeframe_info, frame_type) - 0usize];
    ["Offset of field: vpx_rc_encodeframe_info::show_index"][::std::mem::offset_of!(vpx_rc_encodeframe_info, show_index) - 4usize];
    ["Offset of field: vpx_rc_encodeframe_info::coding_index"][::std::mem::offset_of!(vpx_rc_encodeframe_info, coding_index) - 8usize];
    ["Offset of field: vpx_rc_encodeframe_info::gop_index"][::std::mem::offset_of!(vpx_rc_encodeframe_info, gop_index) - 12usize];
    ["Offset of field: vpx_rc_encodeframe_info::ref_frame_coding_indexes"]
        [::std::mem::offset_of!(vpx_rc_encodeframe_info, ref_frame_coding_indexes) - 16usize];
    ["Offset of field: vpx_rc_encodeframe_info::ref_frame_valid_list"]
        [::std::mem::offset_of!(vpx_rc_encodeframe_info, ref_frame_valid_list) - 28usize];
    ["Offset of field: vpx_rc_encodeframe_info::gop_size"][::std::mem::offset_of!(vpx_rc_encodeframe_info, gop_size) - 40usize];
    ["Offset of field: vpx_rc_encodeframe_info::use_alt_ref"][::std::mem::offset_of!(vpx_rc_encodeframe_info, use_alt_ref) - 44usize];
};
pub type vpx_rc_encodeframe_info_t = vpx_rc_encodeframe_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vpx_rc_encodeframe_result {
    pub bit_count: i64,
    pub actual_encoding_qindex: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vpx_rc_encodeframe_result"][::std::mem::size_of::<vpx_rc_encodeframe_result>() - 16usize];
    ["Alignment of vpx_rc_encodeframe_result"][::std::mem::align_of::<vpx_rc_encodeframe_result>() - 8usize];
    ["Offset of field: vpx_rc_encodeframe_result::bit_count"][::std::mem::offset_of!(vpx_rc_encodeframe_result, bit_count) - 0usize];
    ["Offset of field: vpx_rc_encodeframe_result::actual_encoding_qindex"]
        [::std::mem::offset_of!(vpx_rc_encodeframe_result, actual_encoding_qindex) - 8usize];
};
pub type vpx_rc_encodeframe_result_t = vpx_rc_encodeframe_result;
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum vpx_rc_status {
    VPX_RC_OK = 0,
    VPX_RC_ERROR = 1,
}
pub use self::vpx_rc_status as vpx_rc_status_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vpx_rc_frame_stats {
    pub frame: f64,
    pub weight: f64,
    pub intra_error: f64,
    pub coded_error: f64,
    pub sr_coded_error: f64,
    pub frame_noise_energy: f64,
    pub pcnt_inter: f64,
    pub pcnt_motion: f64,
    pub pcnt_second_ref: f64,
    pub pcnt_neutral: f64,
    pub pcnt_intra_low: f64,
    pub pcnt_intra_high: f64,
    pub intra_skip_pct: f64,
    pub intra_smooth_pct: f64,
    pub inactive_zone_rows: f64,
    pub inactive_zone_cols: f64,
    pub MVr: f64,
    pub mvr_abs: f64,
    pub MVc: f64,
    pub mvc_abs: f64,
    pub MVrv: f64,
    pub MVcv: f64,
    pub mv_in_out_count: f64,
    pub duration: f64,
    pub count: f64,
    pub new_mv_count: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vpx_rc_frame_stats"][::std::mem::size_of::<vpx_rc_frame_stats>() - 208usize];
    ["Alignment of vpx_rc_frame_stats"][::std::mem::align_of::<vpx_rc_frame_stats>() - 8usize];
    ["Offset of field: vpx_rc_frame_stats::frame"][::std::mem::offset_of!(vpx_rc_frame_stats, frame) - 0usize];
    ["Offset of field: vpx_rc_frame_stats::weight"][::std::mem::offset_of!(vpx_rc_frame_stats, weight) - 8usize];
    ["Offset of field: vpx_rc_frame_stats::intra_error"][::std::mem::offset_of!(vpx_rc_frame_stats, intra_error) - 16usize];
    ["Offset of field: vpx_rc_frame_stats::coded_error"][::std::mem::offset_of!(vpx_rc_frame_stats, coded_error) - 24usize];
    ["Offset of field: vpx_rc_frame_stats::sr_coded_error"][::std::mem::offset_of!(vpx_rc_frame_stats, sr_coded_error) - 32usize];
    ["Offset of field: vpx_rc_frame_stats::frame_noise_energy"][::std::mem::offset_of!(vpx_rc_frame_stats, frame_noise_energy) - 40usize];
    ["Offset of field: vpx_rc_frame_stats::pcnt_inter"][::std::mem::offset_of!(vpx_rc_frame_stats, pcnt_inter) - 48usize];
    ["Offset of field: vpx_rc_frame_stats::pcnt_motion"][::std::mem::offset_of!(vpx_rc_frame_stats, pcnt_motion) - 56usize];
    ["Offset of field: vpx_rc_frame_stats::pcnt_second_ref"][::std::mem::offset_of!(vpx_rc_frame_stats, pcnt_second_ref) - 64usize];
    ["Offset of field: vpx_rc_frame_stats::pcnt_neutral"][::std::mem::offset_of!(vpx_rc_frame_stats, pcnt_neutral) - 72usize];
    ["Offset of field: vpx_rc_frame_stats::pcnt_intra_low"][::std::mem::offset_of!(vpx_rc_frame_stats, pcnt_intra_low) - 80usize];
    ["Offset of field: vpx_rc_frame_stats::pcnt_intra_high"][::std::mem::offset_of!(vpx_rc_frame_stats, pcnt_intra_high) - 88usize];
    ["Offset of field: vpx_rc_frame_stats::intra_skip_pct"][::std::mem::offset_of!(vpx_rc_frame_stats, intra_skip_pct) - 96usize];
    ["Offset of field: vpx_rc_frame_stats::intra_smooth_pct"][::std::mem::offset_of!(vpx_rc_frame_stats, intra_smooth_pct) - 104usize];
    ["Offset of field: vpx_rc_frame_stats::inactive_zone_rows"][::std::mem::offset_of!(vpx_rc_frame_stats, inactive_zone_rows) - 112usize];
    ["Offset of field: vpx_rc_frame_stats::inactive_zone_cols"][::std::mem::offset_of!(vpx_rc_frame_stats, inactive_zone_cols) - 120usize];
    ["Offset of field: vpx_rc_frame_stats::MVr"][::std::mem::offset_of!(vpx_rc_frame_stats, MVr) - 128usize];
    ["Offset of field: vpx_rc_frame_stats::mvr_abs"][::std::mem::offset_of!(vpx_rc_frame_stats, mvr_abs) - 136usize];
    ["Offset of field: vpx_rc_frame_stats::MVc"][::std::mem::offset_of!(vpx_rc_frame_stats, MVc) - 144usize];
    ["Offset of field: vpx_rc_frame_stats::mvc_abs"][::std::mem::offset_of!(vpx_rc_frame_stats, mvc_abs) - 152usize];
    ["Offset of field: vpx_rc_frame_stats::MVrv"][::std::mem::offset_of!(vpx_rc_frame_stats, MVrv) - 160usize];
    ["Offset of field: vpx_rc_frame_stats::MVcv"][::std::mem::offset_of!(vpx_rc_frame_stats, MVcv) - 168usize];
    ["Offset of field: vpx_rc_frame_stats::mv_in_out_count"][::std::mem::offset_of!(vpx_rc_frame_stats, mv_in_out_count) - 176usize];
    ["Offset of field: vpx_rc_frame_stats::duration"][::std::mem::offset_of!(vpx_rc_frame_stats, duration) - 184usize];
    ["Offset of field: vpx_rc_frame_stats::count"][::std::mem::offset_of!(vpx_rc_frame_stats, count) - 192usize];
    ["Offset of field: vpx_rc_frame_stats::new_mv_count"][::std::mem::offset_of!(vpx_rc_frame_stats, new_mv_count) - 200usize];
};
pub type vpx_rc_frame_stats_t = vpx_rc_frame_stats;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vpx_rc_firstpass_stats {
    pub frame_stats: *mut vpx_rc_frame_stats_t,
    pub num_frames: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vpx_rc_firstpass_stats"][::std::mem::size_of::<vpx_rc_firstpass_stats>() - 16usize];
    ["Alignment of vpx_rc_firstpass_stats"][::std::mem::align_of::<vpx_rc_firstpass_stats>() - 8usize];
    ["Offset of field: vpx_rc_firstpass_stats::frame_stats"][::std::mem::offset_of!(vpx_rc_firstpass_stats, frame_stats) - 0usize];
    ["Offset of field: vpx_rc_firstpass_stats::num_frames"][::std::mem::offset_of!(vpx_rc_firstpass_stats, num_frames) - 8usize];
};
pub type vpx_rc_firstpass_stats_t = vpx_rc_firstpass_stats;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vpx_rc_config {
    pub frame_width: ::std::os::raw::c_int,
    pub frame_height: ::std::os::raw::c_int,
    pub show_frame_count: ::std::os::raw::c_int,
    pub max_gf_interval: ::std::os::raw::c_int,
    pub min_gf_interval: ::std::os::raw::c_int,
    pub target_bitrate_kbps: ::std::os::raw::c_int,
    pub frame_rate_num: ::std::os::raw::c_int,
    pub frame_rate_den: ::std::os::raw::c_int,
    pub rc_mode: vpx_ext_rc_mode_t,
    pub overshoot_percent: ::std::os::raw::c_int,
    pub undershoot_percent: ::std::os::raw::c_int,
    pub min_base_q_index: ::std::os::raw::c_int,
    pub max_base_q_index: ::std::os::raw::c_int,
    pub base_qp: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vpx_rc_config"][::std::mem::size_of::<vpx_rc_config>() - 56usize];
    ["Alignment of vpx_rc_config"][::std::mem::align_of::<vpx_rc_config>() - 4usize];
    ["Offset of field: vpx_rc_config::frame_width"][::std::mem::offset_of!(vpx_rc_config, frame_width) - 0usize];
    ["Offset of field: vpx_rc_config::frame_height"][::std::mem::offset_of!(vpx_rc_config, frame_height) - 4usize];
    ["Offset of field: vpx_rc_config::show_frame_count"][::std::mem::offset_of!(vpx_rc_config, show_frame_count) - 8usize];
    ["Offset of field: vpx_rc_config::max_gf_interval"][::std::mem::offset_of!(vpx_rc_config, max_gf_interval) - 12usize];
    ["Offset of field: vpx_rc_config::min_gf_interval"][::std::mem::offset_of!(vpx_rc_config, min_gf_interval) - 16usize];
    ["Offset of field: vpx_rc_config::target_bitrate_kbps"][::std::mem::offset_of!(vpx_rc_config, target_bitrate_kbps) - 20usize];
    ["Offset of field: vpx_rc_config::frame_rate_num"][::std::mem::offset_of!(vpx_rc_config, frame_rate_num) - 24usize];
    ["Offset of field: vpx_rc_config::frame_rate_den"][::std::mem::offset_of!(vpx_rc_config, frame_rate_den) - 28usize];
    ["Offset of field: vpx_rc_config::rc_mode"][::std::mem::offset_of!(vpx_rc_config, rc_mode) - 32usize];
    ["Offset of field: vpx_rc_config::overshoot_percent"][::std::mem::offset_of!(vpx_rc_config, overshoot_percent) - 36usize];
    ["Offset of field: vpx_rc_config::undershoot_percent"][::std::mem::offset_of!(vpx_rc_config, undershoot_percent) - 40usize];
    ["Offset of field: vpx_rc_config::min_base_q_index"][::std::mem::offset_of!(vpx_rc_config, min_base_q_index) - 44usize];
    ["Offset of field: vpx_rc_config::max_base_q_index"][::std::mem::offset_of!(vpx_rc_config, max_base_q_index) - 48usize];
    ["Offset of field: vpx_rc_config::base_qp"][::std::mem::offset_of!(vpx_rc_config, base_qp) - 52usize];
};
pub type vpx_rc_config_t = vpx_rc_config;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vpx_rc_ref_frame {
    pub index: [::std::os::raw::c_int; 4usize],
    pub name: [vpx_rc_ref_name_t; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vpx_rc_ref_frame"][::std::mem::size_of::<vpx_rc_ref_frame>() - 32usize];
    ["Alignment of vpx_rc_ref_frame"][::std::mem::align_of::<vpx_rc_ref_frame>() - 4usize];
    ["Offset of field: vpx_rc_ref_frame::index"][::std::mem::offset_of!(vpx_rc_ref_frame, index) - 0usize];
    ["Offset of field: vpx_rc_ref_frame::name"][::std::mem::offset_of!(vpx_rc_ref_frame, name) - 16usize];
};
pub type vpx_rc_ref_frame_t = vpx_rc_ref_frame;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vpx_rc_gop_decision {
    pub gop_coding_frames: ::std::os::raw::c_int,
    pub use_alt_ref: ::std::os::raw::c_int,
    pub use_key_frame: ::std::os::raw::c_int,
    pub update_type: [vpx_rc_frame_update_type_t; 252usize],
    pub update_ref_index: [::std::os::raw::c_int; 252usize],
    pub ref_frame_list: [vpx_rc_ref_frame_t; 252usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vpx_rc_gop_decision"][::std::mem::size_of::<vpx_rc_gop_decision>() - 10092usize];
    ["Alignment of vpx_rc_gop_decision"][::std::mem::align_of::<vpx_rc_gop_decision>() - 4usize];
    ["Offset of field: vpx_rc_gop_decision::gop_coding_frames"][::std::mem::offset_of!(vpx_rc_gop_decision, gop_coding_frames) - 0usize];
    ["Offset of field: vpx_rc_gop_decision::use_alt_ref"][::std::mem::offset_of!(vpx_rc_gop_decision, use_alt_ref) - 4usize];
    ["Offset of field: vpx_rc_gop_decision::use_key_frame"][::std::mem::offset_of!(vpx_rc_gop_decision, use_key_frame) - 8usize];
    ["Offset of field: vpx_rc_gop_decision::update_type"][::std::mem::offset_of!(vpx_rc_gop_decision, update_type) - 12usize];
    ["Offset of field: vpx_rc_gop_decision::update_ref_index"][::std::mem::offset_of!(vpx_rc_gop_decision, update_ref_index) - 1020usize];
    ["Offset of field: vpx_rc_gop_decision::ref_frame_list"][::std::mem::offset_of!(vpx_rc_gop_decision, ref_frame_list) - 2028usize];
};
pub type vpx_rc_gop_decision_t = vpx_rc_gop_decision;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vpx_rc_key_frame_decision {
    pub key_frame_show_index: ::std::os::raw::c_int,
    pub key_frame_group_size: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vpx_rc_key_frame_decision"][::std::mem::size_of::<vpx_rc_key_frame_decision>() - 8usize];
    ["Alignment of vpx_rc_key_frame_decision"][::std::mem::align_of::<vpx_rc_key_frame_decision>() - 4usize];
    ["Offset of field: vpx_rc_key_frame_decision::key_frame_show_index"]
        [::std::mem::offset_of!(vpx_rc_key_frame_decision, key_frame_show_index) - 0usize];
    ["Offset of field: vpx_rc_key_frame_decision::key_frame_group_size"]
        [::std::mem::offset_of!(vpx_rc_key_frame_decision, key_frame_group_size) - 4usize];
};
pub type vpx_rc_key_frame_decision_t = vpx_rc_key_frame_decision;
pub type vpx_rc_create_model_cb_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        ratectrl_config: *const vpx_rc_config_t,
        rate_ctrl_model_ptr: *mut vpx_rc_model_t,
    ) -> vpx_rc_status_t,
>;
pub type vpx_rc_send_firstpass_stats_cb_fn_t = ::std::option::Option<
    unsafe extern "C" fn(rate_ctrl_model: vpx_rc_model_t, first_pass_stats: *const vpx_rc_firstpass_stats_t) -> vpx_rc_status_t,
>;
pub type vpx_rc_send_tpl_gop_stats_cb_fn_t =
    ::std::option::Option<unsafe extern "C" fn(rate_ctrl_model: vpx_rc_model_t, tpl_gop_stats: *const VpxTplGopStats) -> vpx_rc_status_t>;
pub type vpx_rc_get_encodeframe_decision_cb_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        rate_ctrl_model: vpx_rc_model_t,
        frame_gop_index: ::std::os::raw::c_int,
        frame_decision: *mut vpx_rc_encodeframe_decision_t,
    ) -> vpx_rc_status_t,
>;
pub type vpx_rc_update_encodeframe_result_cb_fn_t = ::std::option::Option<
    unsafe extern "C" fn(rate_ctrl_model: vpx_rc_model_t, encode_frame_result: *const vpx_rc_encodeframe_result_t) -> vpx_rc_status_t,
>;
pub type vpx_rc_get_key_frame_decision_cb_fn_t = ::std::option::Option<
    unsafe extern "C" fn(rate_ctrl_model: vpx_rc_model_t, key_frame_decision: *mut vpx_rc_key_frame_decision_t) -> vpx_rc_status_t,
>;
pub type vpx_rc_get_gop_decision_cb_fn_t =
    ::std::option::Option<unsafe extern "C" fn(rate_ctrl_model: vpx_rc_model_t, gop_decision: *mut vpx_rc_gop_decision_t) -> vpx_rc_status_t>;
pub type vpx_rc_get_frame_rdmult_cb_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        rate_ctrl_model: vpx_rc_model_t,
        frame_info: *const vpx_rc_encodeframe_info_t,
        rdmult: *mut ::std::os::raw::c_int,
    ) -> vpx_rc_status_t,
>;
pub type vpx_rc_delete_model_cb_fn_t = ::std::option::Option<unsafe extern "C" fn(rate_ctrl_model: vpx_rc_model_t) -> vpx_rc_status_t>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vpx_rc_funcs {
    pub rc_type: vpx_rc_type_t,
    pub create_model: vpx_rc_create_model_cb_fn_t,
    pub send_firstpass_stats: vpx_rc_send_firstpass_stats_cb_fn_t,
    pub send_tpl_gop_stats: vpx_rc_send_tpl_gop_stats_cb_fn_t,
    pub get_encodeframe_decision: vpx_rc_get_encodeframe_decision_cb_fn_t,
    pub update_encodeframe_result: vpx_rc_update_encodeframe_result_cb_fn_t,
    pub get_key_frame_decision: vpx_rc_get_key_frame_decision_cb_fn_t,
    pub get_gop_decision: vpx_rc_get_gop_decision_cb_fn_t,
    pub get_frame_rdmult: vpx_rc_get_frame_rdmult_cb_fn_t,
    pub delete_model: vpx_rc_delete_model_cb_fn_t,
    pub rate_ctrl_log_path: *const ::std::os::raw::c_char,
    pub priv_: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vpx_rc_funcs"][::std::mem::size_of::<vpx_rc_funcs>() - 96usize];
    ["Alignment of vpx_rc_funcs"][::std::mem::align_of::<vpx_rc_funcs>() - 8usize];
    ["Offset of field: vpx_rc_funcs::rc_type"][::std::mem::offset_of!(vpx_rc_funcs, rc_type) - 0usize];
    ["Offset of field: vpx_rc_funcs::create_model"][::std::mem::offset_of!(vpx_rc_funcs, create_model) - 8usize];
    ["Offset of field: vpx_rc_funcs::send_firstpass_stats"][::std::mem::offset_of!(vpx_rc_funcs, send_firstpass_stats) - 16usize];
    ["Offset of field: vpx_rc_funcs::send_tpl_gop_stats"][::std::mem::offset_of!(vpx_rc_funcs, send_tpl_gop_stats) - 24usize];
    ["Offset of field: vpx_rc_funcs::get_encodeframe_decision"][::std::mem::offset_of!(vpx_rc_funcs, get_encodeframe_decision) - 32usize];
    ["Offset of field: vpx_rc_funcs::update_encodeframe_result"][::std::mem::offset_of!(vpx_rc_funcs, update_encodeframe_result) - 40usize];
    ["Offset of field: vpx_rc_funcs::get_key_frame_decision"][::std::mem::offset_of!(vpx_rc_funcs, get_key_frame_decision) - 48usize];
    ["Offset of field: vpx_rc_funcs::get_gop_decision"][::std::mem::offset_of!(vpx_rc_funcs, get_gop_decision) - 56usize];
    ["Offset of field: vpx_rc_funcs::get_frame_rdmult"][::std::mem::offset_of!(vpx_rc_funcs, get_frame_rdmult) - 64usize];
    ["Offset of field: vpx_rc_funcs::delete_model"][::std::mem::offset_of!(vpx_rc_funcs, delete_model) - 72usize];
    ["Offset of field: vpx_rc_funcs::rate_ctrl_log_path"][::std::mem::offset_of!(vpx_rc_funcs, rate_ctrl_log_path) - 80usize];
    ["Offset of field: vpx_rc_funcs::priv_"][::std::mem::offset_of!(vpx_rc_funcs, priv_) - 88usize];
};
pub type vpx_rc_funcs_t = vpx_rc_funcs;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vpx_fixed_buf {
    pub buf: *mut ::std::os::raw::c_void,
    pub sz: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vpx_fixed_buf"][::std::mem::size_of::<vpx_fixed_buf>() - 16usize];
    ["Alignment of vpx_fixed_buf"][::std::mem::align_of::<vpx_fixed_buf>() - 8usize];
    ["Offset of field: vpx_fixed_buf::buf"][::std::mem::offset_of!(vpx_fixed_buf, buf) - 0usize];
    ["Offset of field: vpx_fixed_buf::sz"][::std::mem::offset_of!(vpx_fixed_buf, sz) - 8usize];
};
pub type vpx_fixed_buf_t = vpx_fixed_buf;
pub type vpx_codec_pts_t = i64;
pub type vpx_codec_frame_flags_t = u32;
pub type vpx_codec_er_flags_t = u32;
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum vpx_codec_cx_pkt_kind {
    VPX_CODEC_CX_FRAME_PKT = 0,
    VPX_CODEC_STATS_PKT = 1,
    VPX_CODEC_FPMB_STATS_PKT = 2,
    VPX_CODEC_PSNR_PKT = 3,
    VPX_CODEC_CUSTOM_PKT = 256,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct vpx_codec_cx_pkt {
    pub kind: vpx_codec_cx_pkt_kind,
    pub data: vpx_codec_cx_pkt__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vpx_codec_cx_pkt__bindgen_ty_1 {
    pub frame: vpx_codec_cx_pkt__bindgen_ty_1__bindgen_ty_1,
    pub twopass_stats: vpx_fixed_buf_t,
    pub firstpass_mb_stats: vpx_fixed_buf_t,
    pub psnr: vpx_codec_cx_pkt__bindgen_ty_1_vpx_psnr_pkt,
    pub raw: vpx_fixed_buf_t,
    pub pad: [::std::os::raw::c_char; 124usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vpx_codec_cx_pkt__bindgen_ty_1__bindgen_ty_1 {
    pub buf: *mut ::std::os::raw::c_void,
    pub sz: usize,
    pub pts: vpx_codec_pts_t,
    pub duration: ::std::os::raw::c_ulong,
    pub flags: vpx_codec_frame_flags_t,
    pub partition_id: ::std::os::raw::c_int,
    pub width: [::std::os::raw::c_uint; 5usize],
    pub height: [::std::os::raw::c_uint; 5usize],
    pub spatial_layer_encoded: [u8; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vpx_codec_cx_pkt__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<vpx_codec_cx_pkt__bindgen_ty_1__bindgen_ty_1>() - 88usize];
    ["Alignment of vpx_codec_cx_pkt__bindgen_ty_1__bindgen_ty_1"][::std::mem::align_of::<vpx_codec_cx_pkt__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: vpx_codec_cx_pkt__bindgen_ty_1__bindgen_ty_1::buf"]
        [::std::mem::offset_of!(vpx_codec_cx_pkt__bindgen_ty_1__bindgen_ty_1, buf) - 0usize];
    ["Offset of field: vpx_codec_cx_pkt__bindgen_ty_1__bindgen_ty_1::sz"]
        [::std::mem::offset_of!(vpx_codec_cx_pkt__bindgen_ty_1__bindgen_ty_1, sz) - 8usize];
    ["Offset of field: vpx_codec_cx_pkt__bindgen_ty_1__bindgen_ty_1::pts"]
        [::std::mem::offset_of!(vpx_codec_cx_pkt__bindgen_ty_1__bindgen_ty_1, pts) - 16usize];
    ["Offset of field: vpx_codec_cx_pkt__bindgen_ty_1__bindgen_ty_1::duration"]
        [::std::mem::offset_of!(vpx_codec_cx_pkt__bindgen_ty_1__bindgen_ty_1, duration) - 24usize];
    ["Offset of field: vpx_codec_cx_pkt__bindgen_ty_1__bindgen_ty_1::flags"]
        [::std::mem::offset_of!(vpx_codec_cx_pkt__bindgen_ty_1__bindgen_ty_1, flags) - 28usize];
    ["Offset of field: vpx_codec_cx_pkt__bindgen_ty_1__bindgen_ty_1::partition_id"]
        [::std::mem::offset_of!(vpx_codec_cx_pkt__bindgen_ty_1__bindgen_ty_1, partition_id) - 32usize];
    ["Offset of field: vpx_codec_cx_pkt__bindgen_ty_1__bindgen_ty_1::width"]
        [::std::mem::offset_of!(vpx_codec_cx_pkt__bindgen_ty_1__bindgen_ty_1, width) - 36usize];
    ["Offset of field: vpx_codec_cx_pkt__bindgen_ty_1__bindgen_ty_1::height"]
        [::std::mem::offset_of!(vpx_codec_cx_pkt__bindgen_ty_1__bindgen_ty_1, height) - 56usize];
    ["Offset of field: vpx_codec_cx_pkt__bindgen_ty_1__bindgen_ty_1::spatial_layer_encoded"]
        [::std::mem::offset_of!(vpx_codec_cx_pkt__bindgen_ty_1__bindgen_ty_1, spatial_layer_encoded) - 76usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vpx_codec_cx_pkt__bindgen_ty_1_vpx_psnr_pkt {
    pub samples: [::std::os::raw::c_uint; 4usize],
    pub sse: [u64; 4usize],
    pub psnr: [f64; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vpx_codec_cx_pkt__bindgen_ty_1_vpx_psnr_pkt"][::std::mem::size_of::<vpx_codec_cx_pkt__bindgen_ty_1_vpx_psnr_pkt>() - 80usize];
    ["Alignment of vpx_codec_cx_pkt__bindgen_ty_1_vpx_psnr_pkt"][::std::mem::align_of::<vpx_codec_cx_pkt__bindgen_ty_1_vpx_psnr_pkt>() - 8usize];
    ["Offset of field: vpx_codec_cx_pkt__bindgen_ty_1_vpx_psnr_pkt::samples"]
        [::std::mem::offset_of!(vpx_codec_cx_pkt__bindgen_ty_1_vpx_psnr_pkt, samples) - 0usize];
    ["Offset of field: vpx_codec_cx_pkt__bindgen_ty_1_vpx_psnr_pkt::sse"]
        [::std::mem::offset_of!(vpx_codec_cx_pkt__bindgen_ty_1_vpx_psnr_pkt, sse) - 16usize];
    ["Offset of field: vpx_codec_cx_pkt__bindgen_ty_1_vpx_psnr_pkt::psnr"]
        [::std::mem::offset_of!(vpx_codec_cx_pkt__bindgen_ty_1_vpx_psnr_pkt, psnr) - 48usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vpx_codec_cx_pkt__bindgen_ty_1"][::std::mem::size_of::<vpx_codec_cx_pkt__bindgen_ty_1>() - 128usize];
    ["Alignment of vpx_codec_cx_pkt__bindgen_ty_1"][::std::mem::align_of::<vpx_codec_cx_pkt__bindgen_ty_1>() - 8usize];
    ["Offset of field: vpx_codec_cx_pkt__bindgen_ty_1::frame"][::std::mem::offset_of!(vpx_codec_cx_pkt__bindgen_ty_1, frame) - 0usize];
    ["Offset of field: vpx_codec_cx_pkt__bindgen_ty_1::twopass_stats"]
        [::std::mem::offset_of!(vpx_codec_cx_pkt__bindgen_ty_1, twopass_stats) - 0usize];
    ["Offset of field: vpx_codec_cx_pkt__bindgen_ty_1::firstpass_mb_stats"]
        [::std::mem::offset_of!(vpx_codec_cx_pkt__bindgen_ty_1, firstpass_mb_stats) - 0usize];
    ["Offset of field: vpx_codec_cx_pkt__bindgen_ty_1::psnr"][::std::mem::offset_of!(vpx_codec_cx_pkt__bindgen_ty_1, psnr) - 0usize];
    ["Offset of field: vpx_codec_cx_pkt__bindgen_ty_1::raw"][::std::mem::offset_of!(vpx_codec_cx_pkt__bindgen_ty_1, raw) - 0usize];
    ["Offset of field: vpx_codec_cx_pkt__bindgen_ty_1::pad"][::std::mem::offset_of!(vpx_codec_cx_pkt__bindgen_ty_1, pad) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vpx_codec_cx_pkt"][::std::mem::size_of::<vpx_codec_cx_pkt>() - 136usize];
    ["Alignment of vpx_codec_cx_pkt"][::std::mem::align_of::<vpx_codec_cx_pkt>() - 8usize];
    ["Offset of field: vpx_codec_cx_pkt::kind"][::std::mem::offset_of!(vpx_codec_cx_pkt, kind) - 0usize];
    ["Offset of field: vpx_codec_cx_pkt::data"][::std::mem::offset_of!(vpx_codec_cx_pkt, data) - 8usize];
};
pub type vpx_codec_cx_pkt_t = vpx_codec_cx_pkt;
pub type vpx_codec_enc_output_cx_pkt_cb_fn_t =
    ::std::option::Option<unsafe extern "C" fn(pkt: *mut vpx_codec_cx_pkt_t, user_data: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vpx_codec_enc_output_cx_cb_pair {
    pub output_cx_pkt: vpx_codec_enc_output_cx_pkt_cb_fn_t,
    pub user_priv: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vpx_codec_enc_output_cx_cb_pair"][::std::mem::size_of::<vpx_codec_enc_output_cx_cb_pair>() - 16usize];
    ["Alignment of vpx_codec_enc_output_cx_cb_pair"][::std::mem::align_of::<vpx_codec_enc_output_cx_cb_pair>() - 8usize];
    ["Offset of field: vpx_codec_enc_output_cx_cb_pair::output_cx_pkt"]
        [::std::mem::offset_of!(vpx_codec_enc_output_cx_cb_pair, output_cx_pkt) - 0usize];
    ["Offset of field: vpx_codec_enc_output_cx_cb_pair::user_priv"][::std::mem::offset_of!(vpx_codec_enc_output_cx_cb_pair, user_priv) - 8usize];
};
pub type vpx_codec_priv_output_cx_pkt_cb_pair_t = vpx_codec_enc_output_cx_cb_pair;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vpx_rational {
    pub num: ::std::os::raw::c_int,
    pub den: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vpx_rational"][::std::mem::size_of::<vpx_rational>() - 8usize];
    ["Alignment of vpx_rational"][::std::mem::align_of::<vpx_rational>() - 4usize];
    ["Offset of field: vpx_rational::num"][::std::mem::offset_of!(vpx_rational, num) - 0usize];
    ["Offset of field: vpx_rational::den"][::std::mem::offset_of!(vpx_rational, den) - 4usize];
};
pub type vpx_rational_t = vpx_rational;
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum vpx_enc_pass {
    VPX_RC_ONE_PASS = 0,
    VPX_RC_FIRST_PASS = 1,
    VPX_RC_LAST_PASS = 2,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum vpx_rc_mode {
    VPX_VBR = 0,
    VPX_CBR = 1,
    VPX_CQ = 2,
    VPX_Q = 3,
}
impl vpx_kf_mode {
    pub const VPX_KF_DISABLED: vpx_kf_mode = vpx_kf_mode::VPX_KF_FIXED;
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum vpx_kf_mode {
    VPX_KF_FIXED = 0,
    VPX_KF_AUTO = 1,
}
pub type vpx_enc_frame_flags_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vpx_codec_enc_cfg {
    pub g_usage: ::std::os::raw::c_uint,
    pub g_threads: ::std::os::raw::c_uint,
    pub g_profile: ::std::os::raw::c_uint,
    pub g_w: ::std::os::raw::c_uint,
    pub g_h: ::std::os::raw::c_uint,
    pub g_bit_depth: vpx_bit_depth_t,
    pub g_input_bit_depth: ::std::os::raw::c_uint,
    pub g_timebase: vpx_rational,
    pub g_error_resilient: vpx_codec_er_flags_t,
    pub g_pass: vpx_enc_pass,
    pub g_lag_in_frames: ::std::os::raw::c_uint,
    pub rc_dropframe_thresh: ::std::os::raw::c_uint,
    pub rc_resize_allowed: ::std::os::raw::c_uint,
    pub rc_scaled_width: ::std::os::raw::c_uint,
    pub rc_scaled_height: ::std::os::raw::c_uint,
    pub rc_resize_up_thresh: ::std::os::raw::c_uint,
    pub rc_resize_down_thresh: ::std::os::raw::c_uint,
    pub rc_end_usage: vpx_rc_mode,
    pub rc_twopass_stats_in: vpx_fixed_buf_t,
    pub rc_firstpass_mb_stats_in: vpx_fixed_buf_t,
    pub rc_target_bitrate: ::std::os::raw::c_uint,
    pub rc_min_quantizer: ::std::os::raw::c_uint,
    pub rc_max_quantizer: ::std::os::raw::c_uint,
    pub rc_undershoot_pct: ::std::os::raw::c_uint,
    pub rc_overshoot_pct: ::std::os::raw::c_uint,
    pub rc_buf_sz: ::std::os::raw::c_uint,
    pub rc_buf_initial_sz: ::std::os::raw::c_uint,
    pub rc_buf_optimal_sz: ::std::os::raw::c_uint,
    pub rc_2pass_vbr_bias_pct: ::std::os::raw::c_uint,
    pub rc_2pass_vbr_minsection_pct: ::std::os::raw::c_uint,
    pub rc_2pass_vbr_maxsection_pct: ::std::os::raw::c_uint,
    pub rc_2pass_vbr_corpus_complexity: ::std::os::raw::c_uint,
    pub kf_mode: vpx_kf_mode,
    pub kf_min_dist: ::std::os::raw::c_uint,
    pub kf_max_dist: ::std::os::raw::c_uint,
    pub ss_number_layers: ::std::os::raw::c_uint,
    pub ss_enable_auto_alt_ref: [::std::os::raw::c_int; 5usize],
    pub ss_target_bitrate: [::std::os::raw::c_uint; 5usize],
    pub ts_number_layers: ::std::os::raw::c_uint,
    pub ts_target_bitrate: [::std::os::raw::c_uint; 5usize],
    pub ts_rate_decimator: [::std::os::raw::c_uint; 5usize],
    pub ts_periodicity: ::std::os::raw::c_uint,
    pub ts_layer_id: [::std::os::raw::c_uint; 16usize],
    pub layer_target_bitrate: [::std::os::raw::c_uint; 12usize],
    pub temporal_layering_mode: ::std::os::raw::c_int,
    pub use_vizier_rc_params: ::std::os::raw::c_int,
    pub active_wq_factor: vpx_rational_t,
    pub err_per_mb_factor: vpx_rational_t,
    pub sr_default_decay_limit: vpx_rational_t,
    pub sr_diff_factor: vpx_rational_t,
    pub kf_err_per_mb_factor: vpx_rational_t,
    pub kf_frame_min_boost_factor: vpx_rational_t,
    pub kf_frame_max_boost_first_factor: vpx_rational_t,
    pub kf_frame_max_boost_subs_factor: vpx_rational_t,
    pub kf_max_total_boost_factor: vpx_rational_t,
    pub gf_max_total_boost_factor: vpx_rational_t,
    pub gf_frame_max_boost_factor: vpx_rational_t,
    pub zm_factor: vpx_rational_t,
    pub rd_mult_inter_qp_fac: vpx_rational_t,
    pub rd_mult_arf_qp_fac: vpx_rational_t,
    pub rd_mult_key_qp_fac: vpx_rational_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vpx_codec_enc_cfg"][::std::mem::size_of::<vpx_codec_enc_cfg>() - 504usize];
    ["Alignment of vpx_codec_enc_cfg"][::std::mem::align_of::<vpx_codec_enc_cfg>() - 8usize];
    ["Offset of field: vpx_codec_enc_cfg::g_usage"][::std::mem::offset_of!(vpx_codec_enc_cfg, g_usage) - 0usize];
    ["Offset of field: vpx_codec_enc_cfg::g_threads"][::std::mem::offset_of!(vpx_codec_enc_cfg, g_threads) - 4usize];
    ["Offset of field: vpx_codec_enc_cfg::g_profile"][::std::mem::offset_of!(vpx_codec_enc_cfg, g_profile) - 8usize];
    ["Offset of field: vpx_codec_enc_cfg::g_w"][::std::mem::offset_of!(vpx_codec_enc_cfg, g_w) - 12usize];
    ["Offset of field: vpx_codec_enc_cfg::g_h"][::std::mem::offset_of!(vpx_codec_enc_cfg, g_h) - 16usize];
    ["Offset of field: vpx_codec_enc_cfg::g_bit_depth"][::std::mem::offset_of!(vpx_codec_enc_cfg, g_bit_depth) - 20usize];
    ["Offset of field: vpx_codec_enc_cfg::g_input_bit_depth"][::std::mem::offset_of!(vpx_codec_enc_cfg, g_input_bit_depth) - 24usize];
    ["Offset of field: vpx_codec_enc_cfg::g_timebase"][::std::mem::offset_of!(vpx_codec_enc_cfg, g_timebase) - 28usize];
    ["Offset of field: vpx_codec_enc_cfg::g_error_resilient"][::std::mem::offset_of!(vpx_codec_enc_cfg, g_error_resilient) - 36usize];
    ["Offset of field: vpx_codec_enc_cfg::g_pass"][::std::mem::offset_of!(vpx_codec_enc_cfg, g_pass) - 40usize];
    ["Offset of field: vpx_codec_enc_cfg::g_lag_in_frames"][::std::mem::offset_of!(vpx_codec_enc_cfg, g_lag_in_frames) - 44usize];
    ["Offset of field: vpx_codec_enc_cfg::rc_dropframe_thresh"][::std::mem::offset_of!(vpx_codec_enc_cfg, rc_dropframe_thresh) - 48usize];
    ["Offset of field: vpx_codec_enc_cfg::rc_resize_allowed"][::std::mem::offset_of!(vpx_codec_enc_cfg, rc_resize_allowed) - 52usize];
    ["Offset of field: vpx_codec_enc_cfg::rc_scaled_width"][::std::mem::offset_of!(vpx_codec_enc_cfg, rc_scaled_width) - 56usize];
    ["Offset of field: vpx_codec_enc_cfg::rc_scaled_height"][::std::mem::offset_of!(vpx_codec_enc_cfg, rc_scaled_height) - 60usize];
    ["Offset of field: vpx_codec_enc_cfg::rc_resize_up_thresh"][::std::mem::offset_of!(vpx_codec_enc_cfg, rc_resize_up_thresh) - 64usize];
    ["Offset of field: vpx_codec_enc_cfg::rc_resize_down_thresh"][::std::mem::offset_of!(vpx_codec_enc_cfg, rc_resize_down_thresh) - 68usize];
    ["Offset of field: vpx_codec_enc_cfg::rc_end_usage"][::std::mem::offset_of!(vpx_codec_enc_cfg, rc_end_usage) - 72usize];
    ["Offset of field: vpx_codec_enc_cfg::rc_twopass_stats_in"][::std::mem::offset_of!(vpx_codec_enc_cfg, rc_twopass_stats_in) - 80usize];
    ["Offset of field: vpx_codec_enc_cfg::rc_firstpass_mb_stats_in"][::std::mem::offset_of!(vpx_codec_enc_cfg, rc_firstpass_mb_stats_in) - 96usize];
    ["Offset of field: vpx_codec_enc_cfg::rc_target_bitrate"][::std::mem::offset_of!(vpx_codec_enc_cfg, rc_target_bitrate) - 112usize];
    ["Offset of field: vpx_codec_enc_cfg::rc_min_quantizer"][::std::mem::offset_of!(vpx_codec_enc_cfg, rc_min_quantizer) - 116usize];
    ["Offset of field: vpx_codec_enc_cfg::rc_max_quantizer"][::std::mem::offset_of!(vpx_codec_enc_cfg, rc_max_quantizer) - 120usize];
    ["Offset of field: vpx_codec_enc_cfg::rc_undershoot_pct"][::std::mem::offset_of!(vpx_codec_enc_cfg, rc_undershoot_pct) - 124usize];
    ["Offset of field: vpx_codec_enc_cfg::rc_overshoot_pct"][::std::mem::offset_of!(vpx_codec_enc_cfg, rc_overshoot_pct) - 128usize];
    ["Offset of field: vpx_codec_enc_cfg::rc_buf_sz"][::std::mem::offset_of!(vpx_codec_enc_cfg, rc_buf_sz) - 132usize];
    ["Offset of field: vpx_codec_enc_cfg::rc_buf_initial_sz"][::std::mem::offset_of!(vpx_codec_enc_cfg, rc_buf_initial_sz) - 136usize];
    ["Offset of field: vpx_codec_enc_cfg::rc_buf_optimal_sz"][::std::mem::offset_of!(vpx_codec_enc_cfg, rc_buf_optimal_sz) - 140usize];
    ["Offset of field: vpx_codec_enc_cfg::rc_2pass_vbr_bias_pct"][::std::mem::offset_of!(vpx_codec_enc_cfg, rc_2pass_vbr_bias_pct) - 144usize];
    ["Offset of field: vpx_codec_enc_cfg::rc_2pass_vbr_minsection_pct"]
        [::std::mem::offset_of!(vpx_codec_enc_cfg, rc_2pass_vbr_minsection_pct) - 148usize];
    ["Offset of field: vpx_codec_enc_cfg::rc_2pass_vbr_maxsection_pct"]
        [::std::mem::offset_of!(vpx_codec_enc_cfg, rc_2pass_vbr_maxsection_pct) - 152usize];
    ["Offset of field: vpx_codec_enc_cfg::rc_2pass_vbr_corpus_complexity"]
        [::std::mem::offset_of!(vpx_codec_enc_cfg, rc_2pass_vbr_corpus_complexity) - 156usize];
    ["Offset of field: vpx_codec_enc_cfg::kf_mode"][::std::mem::offset_of!(vpx_codec_enc_cfg, kf_mode) - 160usize];
    ["Offset of field: vpx_codec_enc_cfg::kf_min_dist"][::std::mem::offset_of!(vpx_codec_enc_cfg, kf_min_dist) - 164usize];
    ["Offset of field: vpx_codec_enc_cfg::kf_max_dist"][::std::mem::offset_of!(vpx_codec_enc_cfg, kf_max_dist) - 168usize];
    ["Offset of field: vpx_codec_enc_cfg::ss_number_layers"][::std::mem::offset_of!(vpx_codec_enc_cfg, ss_number_layers) - 172usize];
    ["Offset of field: vpx_codec_enc_cfg::ss_enable_auto_alt_ref"][::std::mem::offset_of!(vpx_codec_enc_cfg, ss_enable_auto_alt_ref) - 176usize];
    ["Offset of field: vpx_codec_enc_cfg::ss_target_bitrate"][::std::mem::offset_of!(vpx_codec_enc_cfg, ss_target_bitrate) - 196usize];
    ["Offset of field: vpx_codec_enc_cfg::ts_number_layers"][::std::mem::offset_of!(vpx_codec_enc_cfg, ts_number_layers) - 216usize];
    ["Offset of field: vpx_codec_enc_cfg::ts_target_bitrate"][::std::mem::offset_of!(vpx_codec_enc_cfg, ts_target_bitrate) - 220usize];
    ["Offset of field: vpx_codec_enc_cfg::ts_rate_decimator"][::std::mem::offset_of!(vpx_codec_enc_cfg, ts_rate_decimator) - 240usize];
    ["Offset of field: vpx_codec_enc_cfg::ts_periodicity"][::std::mem::offset_of!(vpx_codec_enc_cfg, ts_periodicity) - 260usize];
    ["Offset of field: vpx_codec_enc_cfg::ts_layer_id"][::std::mem::offset_of!(vpx_codec_enc_cfg, ts_layer_id) - 264usize];
    ["Offset of field: vpx_codec_enc_cfg::layer_target_bitrate"][::std::mem::offset_of!(vpx_codec_enc_cfg, layer_target_bitrate) - 328usize];
    ["Offset of field: vpx_codec_enc_cfg::temporal_layering_mode"][::std::mem::offset_of!(vpx_codec_enc_cfg, temporal_layering_mode) - 376usize];
    ["Offset of field: vpx_codec_enc_cfg::use_vizier_rc_params"][::std::mem::offset_of!(vpx_codec_enc_cfg, use_vizier_rc_params) - 380usize];
    ["Offset of field: vpx_codec_enc_cfg::active_wq_factor"][::std::mem::offset_of!(vpx_codec_enc_cfg, active_wq_factor) - 384usize];
    ["Offset of field: vpx_codec_enc_cfg::err_per_mb_factor"][::std::mem::offset_of!(vpx_codec_enc_cfg, err_per_mb_factor) - 392usize];
    ["Offset of field: vpx_codec_enc_cfg::sr_default_decay_limit"][::std::mem::offset_of!(vpx_codec_enc_cfg, sr_default_decay_limit) - 400usize];
    ["Offset of field: vpx_codec_enc_cfg::sr_diff_factor"][::std::mem::offset_of!(vpx_codec_enc_cfg, sr_diff_factor) - 408usize];
    ["Offset of field: vpx_codec_enc_cfg::kf_err_per_mb_factor"][::std::mem::offset_of!(vpx_codec_enc_cfg, kf_err_per_mb_factor) - 416usize];
    ["Offset of field: vpx_codec_enc_cfg::kf_frame_min_boost_factor"]
        [::std::mem::offset_of!(vpx_codec_enc_cfg, kf_frame_min_boost_factor) - 424usize];
    ["Offset of field: vpx_codec_enc_cfg::kf_frame_max_boost_first_factor"]
        [::std::mem::offset_of!(vpx_codec_enc_cfg, kf_frame_max_boost_first_factor) - 432usize];
    ["Offset of field: vpx_codec_enc_cfg::kf_frame_max_boost_subs_factor"]
        [::std::mem::offset_of!(vpx_codec_enc_cfg, kf_frame_max_boost_subs_factor) - 440usize];
    ["Offset of field: vpx_codec_enc_cfg::kf_max_total_boost_factor"]
        [::std::mem::offset_of!(vpx_codec_enc_cfg, kf_max_total_boost_factor) - 448usize];
    ["Offset of field: vpx_codec_enc_cfg::gf_max_total_boost_factor"]
        [::std::mem::offset_of!(vpx_codec_enc_cfg, gf_max_total_boost_factor) - 456usize];
    ["Offset of field: vpx_codec_enc_cfg::gf_frame_max_boost_factor"]
        [::std::mem::offset_of!(vpx_codec_enc_cfg, gf_frame_max_boost_factor) - 464usize];
    ["Offset of field: vpx_codec_enc_cfg::zm_factor"][::std::mem::offset_of!(vpx_codec_enc_cfg, zm_factor) - 472usize];
    ["Offset of field: vpx_codec_enc_cfg::rd_mult_inter_qp_fac"][::std::mem::offset_of!(vpx_codec_enc_cfg, rd_mult_inter_qp_fac) - 480usize];
    ["Offset of field: vpx_codec_enc_cfg::rd_mult_arf_qp_fac"][::std::mem::offset_of!(vpx_codec_enc_cfg, rd_mult_arf_qp_fac) - 488usize];
    ["Offset of field: vpx_codec_enc_cfg::rd_mult_key_qp_fac"][::std::mem::offset_of!(vpx_codec_enc_cfg, rd_mult_key_qp_fac) - 496usize];
};
pub type vpx_codec_enc_cfg_t = vpx_codec_enc_cfg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vpx_svc_parameters {
    pub max_quantizers: [::std::os::raw::c_int; 12usize],
    pub min_quantizers: [::std::os::raw::c_int; 12usize],
    pub scaling_factor_num: [::std::os::raw::c_int; 12usize],
    pub scaling_factor_den: [::std::os::raw::c_int; 12usize],
    pub speed_per_layer: [::std::os::raw::c_int; 12usize],
    pub temporal_layering_mode: ::std::os::raw::c_int,
    pub loopfilter_ctrl: [::std::os::raw::c_int; 12usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vpx_svc_parameters"][::std::mem::size_of::<vpx_svc_parameters>() - 292usize];
    ["Alignment of vpx_svc_parameters"][::std::mem::align_of::<vpx_svc_parameters>() - 4usize];
    ["Offset of field: vpx_svc_parameters::max_quantizers"][::std::mem::offset_of!(vpx_svc_parameters, max_quantizers) - 0usize];
    ["Offset of field: vpx_svc_parameters::min_quantizers"][::std::mem::offset_of!(vpx_svc_parameters, min_quantizers) - 48usize];
    ["Offset of field: vpx_svc_parameters::scaling_factor_num"][::std::mem::offset_of!(vpx_svc_parameters, scaling_factor_num) - 96usize];
    ["Offset of field: vpx_svc_parameters::scaling_factor_den"][::std::mem::offset_of!(vpx_svc_parameters, scaling_factor_den) - 144usize];
    ["Offset of field: vpx_svc_parameters::speed_per_layer"][::std::mem::offset_of!(vpx_svc_parameters, speed_per_layer) - 192usize];
    ["Offset of field: vpx_svc_parameters::temporal_layering_mode"][::std::mem::offset_of!(vpx_svc_parameters, temporal_layering_mode) - 240usize];
    ["Offset of field: vpx_svc_parameters::loopfilter_ctrl"][::std::mem::offset_of!(vpx_svc_parameters, loopfilter_ctrl) - 244usize];
};
pub type vpx_svc_extra_cfg_t = vpx_svc_parameters;
unsafe extern "C" {
    pub fn vpx_codec_enc_init_ver(
        ctx: *mut vpx_codec_ctx_t,
        iface: *const vpx_codec_iface,
        cfg: *const vpx_codec_enc_cfg_t,
        flags: vpx_codec_flags_t,
        ver: ::std::os::raw::c_int,
    ) -> vpx_codec_err_t;
}
unsafe extern "C" {
    pub fn vpx_codec_enc_init_multi_ver(
        ctx: *mut vpx_codec_ctx_t,
        iface: *const vpx_codec_iface,
        cfg: *mut vpx_codec_enc_cfg_t,
        num_enc: ::std::os::raw::c_int,
        flags: vpx_codec_flags_t,
        dsf: *mut vpx_rational_t,
        ver: ::std::os::raw::c_int,
    ) -> vpx_codec_err_t;
}
unsafe extern "C" {
    pub fn vpx_codec_enc_config_default(
        iface: *const vpx_codec_iface,
        cfg: *mut vpx_codec_enc_cfg_t,
        usage: ::std::os::raw::c_uint,
    ) -> vpx_codec_err_t;
}
unsafe extern "C" {
    pub fn vpx_codec_enc_config_set(ctx: *mut vpx_codec_ctx_t, cfg: *const vpx_codec_enc_cfg_t) -> vpx_codec_err_t;
}
unsafe extern "C" {
    pub fn vpx_codec_get_global_headers(ctx: *mut vpx_codec_ctx_t) -> *mut vpx_fixed_buf_t;
}
pub type vpx_enc_deadline_t = ::std::os::raw::c_ulong;
unsafe extern "C" {
    pub fn vpx_codec_encode(
        ctx: *mut vpx_codec_ctx_t,
        img: *const vpx_image_t,
        pts: vpx_codec_pts_t,
        duration: ::std::os::raw::c_ulong,
        flags: vpx_enc_frame_flags_t,
        deadline: vpx_enc_deadline_t,
    ) -> vpx_codec_err_t;
}
unsafe extern "C" {
    pub fn vpx_codec_set_cx_data_buf(
        ctx: *mut vpx_codec_ctx_t,
        buf: *const vpx_fixed_buf_t,
        pad_before: ::std::os::raw::c_uint,
        pad_after: ::std::os::raw::c_uint,
    ) -> vpx_codec_err_t;
}
unsafe extern "C" {
    pub fn vpx_codec_get_cx_data(ctx: *mut vpx_codec_ctx_t, iter: *mut vpx_codec_iter_t) -> *const vpx_codec_cx_pkt_t;
}
unsafe extern "C" {
    pub fn vpx_codec_get_preview_frame(ctx: *mut vpx_codec_ctx_t) -> *const vpx_image_t;
}
unsafe extern "C" {
    pub static mut vpx_codec_vp8_cx_algo: vpx_codec_iface_t;
}
unsafe extern "C" {
    pub fn vpx_codec_vp8_cx() -> *const vpx_codec_iface;
}
unsafe extern "C" {
    pub static mut vpx_codec_vp9_cx_algo: vpx_codec_iface_t;
}
unsafe extern "C" {
    pub fn vpx_codec_vp9_cx() -> *const vpx_codec_iface;
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum vp8e_enc_control_id {
    VP8E_SET_ROI_MAP = 8,
    VP8E_SET_ACTIVEMAP = 9,
    VP8E_SET_SCALEMODE = 11,
    VP8E_SET_CPUUSED = 13,
    VP8E_SET_ENABLEAUTOALTREF = 14,
    VP8E_SET_NOISE_SENSITIVITY = 15,
    VP8E_SET_SHARPNESS = 16,
    VP8E_SET_STATIC_THRESHOLD = 17,
    VP8E_SET_TOKEN_PARTITIONS = 18,
    VP8E_GET_LAST_QUANTIZER = 19,
    VP8E_GET_LAST_QUANTIZER_64 = 20,
    VP8E_SET_ARNR_MAXFRAMES = 21,
    VP8E_SET_ARNR_STRENGTH = 22,
    VP8E_SET_ARNR_TYPE = 23,
    VP8E_SET_TUNING = 24,
    VP8E_SET_CQ_LEVEL = 25,
    VP8E_SET_MAX_INTRA_BITRATE_PCT = 26,
    VP8E_SET_FRAME_FLAGS = 27,
    VP9E_SET_MAX_INTER_BITRATE_PCT = 28,
    VP9E_SET_GF_CBR_BOOST_PCT = 29,
    VP8E_SET_TEMPORAL_LAYER_ID = 30,
    VP8E_SET_SCREEN_CONTENT_MODE = 31,
    VP9E_SET_LOSSLESS = 32,
    VP9E_SET_TILE_COLUMNS = 33,
    VP9E_SET_TILE_ROWS = 34,
    VP9E_SET_FRAME_PARALLEL_DECODING = 35,
    VP9E_SET_AQ_MODE = 36,
    VP9E_SET_FRAME_PERIODIC_BOOST = 37,
    VP9E_SET_NOISE_SENSITIVITY = 38,
    VP9E_SET_SVC = 39,
    VP9E_SET_ROI_MAP = 40,
    VP9E_SET_SVC_PARAMETERS = 41,
    VP9E_SET_SVC_LAYER_ID = 42,
    VP9E_SET_TUNE_CONTENT = 43,
    VP9E_GET_SVC_LAYER_ID = 44,
    VP9E_REGISTER_CX_CALLBACK = 45,
    VP9E_SET_COLOR_SPACE = 46,
    VP9E_SET_MIN_GF_INTERVAL = 48,
    VP9E_SET_MAX_GF_INTERVAL = 49,
    VP9E_GET_ACTIVEMAP = 50,
    VP9E_SET_COLOR_RANGE = 51,
    VP9E_SET_SVC_REF_FRAME_CONFIG = 52,
    VP9E_SET_RENDER_SIZE = 53,
    VP9E_SET_TARGET_LEVEL = 54,
    VP9E_SET_ROW_MT = 55,
    VP9E_GET_LEVEL = 56,
    VP9E_SET_ALT_REF_AQ = 57,
    VP8E_SET_GF_CBR_BOOST_PCT = 58,
    VP9E_ENABLE_MOTION_VECTOR_UNIT_TEST = 59,
    VP9E_SET_SVC_INTER_LAYER_PRED = 60,
    VP9E_SET_SVC_FRAME_DROP_LAYER = 61,
    VP9E_GET_SVC_REF_FRAME_CONFIG = 62,
    VP9E_SET_SVC_GF_TEMPORAL_REF = 63,
    VP9E_SET_SVC_SPATIAL_LAYER_SYNC = 64,
    VP9E_SET_TPL = 65,
    VP9E_SET_POSTENCODE_DROP = 66,
    VP9E_SET_DELTA_Q_UV = 67,
    VP9E_SET_DISABLE_OVERSHOOT_MAXQ_CBR = 68,
    VP9E_SET_DISABLE_LOOPFILTER = 69,
    VP9E_SET_EXTERNAL_RATE_CONTROL = 70,
    VP9E_SET_RTC_EXTERNAL_RATECTRL = 71,
    VP9E_GET_LOOPFILTER_LEVEL = 72,
    VP9E_GET_LAST_QUANTIZER_SVC_LAYERS = 73,
    VP8E_SET_RTC_EXTERNAL_RATECTRL = 74,
    VP9E_SET_QUANTIZER_ONE_PASS = 75,
    VP9E_SET_KEY_FRAME_FILTERING = 76,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum vpx_scaling_mode_1d {
    VP8E_NORMAL = 0,
    VP8E_FOURFIVE = 1,
    VP8E_THREEFIVE = 2,
    VP8E_ONETWO = 3,
}
pub use self::vpx_scaling_mode_1d as VPX_SCALING_MODE;
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum vp9e_temporal_layering_mode {
    VP9E_TEMPORAL_LAYERING_MODE_NOLAYERING = 0,
    VP9E_TEMPORAL_LAYERING_MODE_BYPASS = 1,
    VP9E_TEMPORAL_LAYERING_MODE_0101 = 2,
    VP9E_TEMPORAL_LAYERING_MODE_0212 = 3,
}
pub use self::vp9e_temporal_layering_mode as VP9E_TEMPORAL_LAYERING_MODE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vpx_roi_map {
    pub enabled: u8,
    pub roi_map: *mut ::std::os::raw::c_uchar,
    pub rows: ::std::os::raw::c_uint,
    pub cols: ::std::os::raw::c_uint,
    pub delta_q: [::std::os::raw::c_int; 8usize],
    pub delta_lf: [::std::os::raw::c_int; 8usize],
    pub skip: [::std::os::raw::c_int; 8usize],
    pub ref_frame: [::std::os::raw::c_int; 8usize],
    pub static_threshold: [::std::os::raw::c_uint; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vpx_roi_map"][::std::mem::size_of::<vpx_roi_map>() - 168usize];
    ["Alignment of vpx_roi_map"][::std::mem::align_of::<vpx_roi_map>() - 8usize];
    ["Offset of field: vpx_roi_map::enabled"][::std::mem::offset_of!(vpx_roi_map, enabled) - 0usize];
    ["Offset of field: vpx_roi_map::roi_map"][::std::mem::offset_of!(vpx_roi_map, roi_map) - 8usize];
    ["Offset of field: vpx_roi_map::rows"][::std::mem::offset_of!(vpx_roi_map, rows) - 16usize];
    ["Offset of field: vpx_roi_map::cols"][::std::mem::offset_of!(vpx_roi_map, cols) - 20usize];
    ["Offset of field: vpx_roi_map::delta_q"][::std::mem::offset_of!(vpx_roi_map, delta_q) - 24usize];
    ["Offset of field: vpx_roi_map::delta_lf"][::std::mem::offset_of!(vpx_roi_map, delta_lf) - 56usize];
    ["Offset of field: vpx_roi_map::skip"][::std::mem::offset_of!(vpx_roi_map, skip) - 88usize];
    ["Offset of field: vpx_roi_map::ref_frame"][::std::mem::offset_of!(vpx_roi_map, ref_frame) - 120usize];
    ["Offset of field: vpx_roi_map::static_threshold"][::std::mem::offset_of!(vpx_roi_map, static_threshold) - 152usize];
};
pub type vpx_roi_map_t = vpx_roi_map;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vpx_active_map {
    pub active_map: *mut ::std::os::raw::c_uchar,
    pub rows: ::std::os::raw::c_uint,
    pub cols: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vpx_active_map"][::std::mem::size_of::<vpx_active_map>() - 16usize];
    ["Alignment of vpx_active_map"][::std::mem::align_of::<vpx_active_map>() - 8usize];
    ["Offset of field: vpx_active_map::active_map"][::std::mem::offset_of!(vpx_active_map, active_map) - 0usize];
    ["Offset of field: vpx_active_map::rows"][::std::mem::offset_of!(vpx_active_map, rows) - 8usize];
    ["Offset of field: vpx_active_map::cols"][::std::mem::offset_of!(vpx_active_map, cols) - 12usize];
};
pub type vpx_active_map_t = vpx_active_map;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vpx_scaling_mode {
    pub h_scaling_mode: VPX_SCALING_MODE,
    pub v_scaling_mode: VPX_SCALING_MODE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vpx_scaling_mode"][::std::mem::size_of::<vpx_scaling_mode>() - 8usize];
    ["Alignment of vpx_scaling_mode"][::std::mem::align_of::<vpx_scaling_mode>() - 4usize];
    ["Offset of field: vpx_scaling_mode::h_scaling_mode"][::std::mem::offset_of!(vpx_scaling_mode, h_scaling_mode) - 0usize];
    ["Offset of field: vpx_scaling_mode::v_scaling_mode"][::std::mem::offset_of!(vpx_scaling_mode, v_scaling_mode) - 4usize];
};
pub type vpx_scaling_mode_t = vpx_scaling_mode;
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum vp8e_token_partitions {
    VP8_ONE_TOKENPARTITION = 0,
    VP8_TWO_TOKENPARTITION = 1,
    VP8_FOUR_TOKENPARTITION = 2,
    VP8_EIGHT_TOKENPARTITION = 3,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum vp9e_tune_content {
    VP9E_CONTENT_DEFAULT = 0,
    VP9E_CONTENT_SCREEN = 1,
    VP9E_CONTENT_FILM = 2,
    VP9E_CONTENT_INVALID = 3,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum vp8e_tuning {
    VP8_TUNE_PSNR = 0,
    VP8_TUNE_SSIM = 1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vpx_svc_layer_id {
    pub spatial_layer_id: ::std::os::raw::c_int,
    pub temporal_layer_id: ::std::os::raw::c_int,
    pub temporal_layer_id_per_spatial: [::std::os::raw::c_int; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vpx_svc_layer_id"][::std::mem::size_of::<vpx_svc_layer_id>() - 28usize];
    ["Alignment of vpx_svc_layer_id"][::std::mem::align_of::<vpx_svc_layer_id>() - 4usize];
    ["Offset of field: vpx_svc_layer_id::spatial_layer_id"][::std::mem::offset_of!(vpx_svc_layer_id, spatial_layer_id) - 0usize];
    ["Offset of field: vpx_svc_layer_id::temporal_layer_id"][::std::mem::offset_of!(vpx_svc_layer_id, temporal_layer_id) - 4usize];
    ["Offset of field: vpx_svc_layer_id::temporal_layer_id_per_spatial"]
        [::std::mem::offset_of!(vpx_svc_layer_id, temporal_layer_id_per_spatial) - 8usize];
};
pub type vpx_svc_layer_id_t = vpx_svc_layer_id;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vpx_svc_ref_frame_config {
    pub lst_fb_idx: [::std::os::raw::c_int; 5usize],
    pub gld_fb_idx: [::std::os::raw::c_int; 5usize],
    pub alt_fb_idx: [::std::os::raw::c_int; 5usize],
    pub update_buffer_slot: [::std::os::raw::c_int; 5usize],
    pub update_last: [::std::os::raw::c_int; 5usize],
    pub update_golden: [::std::os::raw::c_int; 5usize],
    pub update_alt_ref: [::std::os::raw::c_int; 5usize],
    pub reference_last: [::std::os::raw::c_int; 5usize],
    pub reference_golden: [::std::os::raw::c_int; 5usize],
    pub reference_alt_ref: [::std::os::raw::c_int; 5usize],
    pub duration: [i64; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vpx_svc_ref_frame_config"][::std::mem::size_of::<vpx_svc_ref_frame_config>() - 240usize];
    ["Alignment of vpx_svc_ref_frame_config"][::std::mem::align_of::<vpx_svc_ref_frame_config>() - 8usize];
    ["Offset of field: vpx_svc_ref_frame_config::lst_fb_idx"][::std::mem::offset_of!(vpx_svc_ref_frame_config, lst_fb_idx) - 0usize];
    ["Offset of field: vpx_svc_ref_frame_config::gld_fb_idx"][::std::mem::offset_of!(vpx_svc_ref_frame_config, gld_fb_idx) - 20usize];
    ["Offset of field: vpx_svc_ref_frame_config::alt_fb_idx"][::std::mem::offset_of!(vpx_svc_ref_frame_config, alt_fb_idx) - 40usize];
    ["Offset of field: vpx_svc_ref_frame_config::update_buffer_slot"][::std::mem::offset_of!(vpx_svc_ref_frame_config, update_buffer_slot) - 60usize];
    ["Offset of field: vpx_svc_ref_frame_config::update_last"][::std::mem::offset_of!(vpx_svc_ref_frame_config, update_last) - 80usize];
    ["Offset of field: vpx_svc_ref_frame_config::update_golden"][::std::mem::offset_of!(vpx_svc_ref_frame_config, update_golden) - 100usize];
    ["Offset of field: vpx_svc_ref_frame_config::update_alt_ref"][::std::mem::offset_of!(vpx_svc_ref_frame_config, update_alt_ref) - 120usize];
    ["Offset of field: vpx_svc_ref_frame_config::reference_last"][::std::mem::offset_of!(vpx_svc_ref_frame_config, reference_last) - 140usize];
    ["Offset of field: vpx_svc_ref_frame_config::reference_golden"][::std::mem::offset_of!(vpx_svc_ref_frame_config, reference_golden) - 160usize];
    ["Offset of field: vpx_svc_ref_frame_config::reference_alt_ref"][::std::mem::offset_of!(vpx_svc_ref_frame_config, reference_alt_ref) - 180usize];
    ["Offset of field: vpx_svc_ref_frame_config::duration"][::std::mem::offset_of!(vpx_svc_ref_frame_config, duration) - 200usize];
};
pub type vpx_svc_ref_frame_config_t = vpx_svc_ref_frame_config;
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum SVC_LAYER_DROP_MODE {
    CONSTRAINED_LAYER_DROP = 0,
    LAYER_DROP = 1,
    FULL_SUPERFRAME_DROP = 2,
    CONSTRAINED_FROM_ABOVE_DROP = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vpx_svc_frame_drop {
    pub framedrop_thresh: [::std::os::raw::c_int; 5usize],
    pub framedrop_mode: SVC_LAYER_DROP_MODE,
    pub max_consec_drop: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vpx_svc_frame_drop"][::std::mem::size_of::<vpx_svc_frame_drop>() - 28usize];
    ["Alignment of vpx_svc_frame_drop"][::std::mem::align_of::<vpx_svc_frame_drop>() - 4usize];
    ["Offset of field: vpx_svc_frame_drop::framedrop_thresh"][::std::mem::offset_of!(vpx_svc_frame_drop, framedrop_thresh) - 0usize];
    ["Offset of field: vpx_svc_frame_drop::framedrop_mode"][::std::mem::offset_of!(vpx_svc_frame_drop, framedrop_mode) - 20usize];
    ["Offset of field: vpx_svc_frame_drop::max_consec_drop"][::std::mem::offset_of!(vpx_svc_frame_drop, max_consec_drop) - 24usize];
};
pub type vpx_svc_frame_drop_t = vpx_svc_frame_drop;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vpx_svc_spatial_layer_sync {
    pub spatial_layer_sync: [::std::os::raw::c_int; 5usize],
    pub base_layer_intra_only: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vpx_svc_spatial_layer_sync"][::std::mem::size_of::<vpx_svc_spatial_layer_sync>() - 24usize];
    ["Alignment of vpx_svc_spatial_layer_sync"][::std::mem::align_of::<vpx_svc_spatial_layer_sync>() - 4usize];
    ["Offset of field: vpx_svc_spatial_layer_sync::spatial_layer_sync"]
        [::std::mem::offset_of!(vpx_svc_spatial_layer_sync, spatial_layer_sync) - 0usize];
    ["Offset of field: vpx_svc_spatial_layer_sync::base_layer_intra_only"]
        [::std::mem::offset_of!(vpx_svc_spatial_layer_sync, base_layer_intra_only) - 20usize];
};
pub type vpx_svc_spatial_layer_sync_t = vpx_svc_spatial_layer_sync;
unsafe extern "C" {
    pub static mut vpx_codec_vp8_dx_algo: vpx_codec_iface_t;
}
unsafe extern "C" {
    pub fn vpx_codec_vp8_dx() -> *const vpx_codec_iface;
}
unsafe extern "C" {
    pub static mut vpx_codec_vp9_dx_algo: vpx_codec_iface_t;
}
unsafe extern "C" {
    pub fn vpx_codec_vp9_dx() -> *const vpx_codec_iface;
}
impl vp8_dec_control_id {
    pub const VP8D_SET_DECRYPTOR: vp8_dec_control_id = vp8_dec_control_id::VPXD_SET_DECRYPTOR;
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum vp8_dec_control_id {
    VP8D_GET_LAST_REF_UPDATES = 256,
    VP8D_GET_FRAME_CORRUPTED = 257,
    VP8D_GET_LAST_REF_USED = 258,
    VPXD_SET_DECRYPTOR = 259,
    VP9D_GET_FRAME_SIZE = 260,
    VP9D_GET_DISPLAY_SIZE = 261,
    VP9D_GET_BIT_DEPTH = 262,
    VP9_SET_BYTE_ALIGNMENT = 263,
    VP9_INVERT_TILE_DECODE_ORDER = 264,
    VP9_SET_SKIP_LOOP_FILTER = 265,
    VP9_DECODE_SVC_SPATIAL_LAYER = 266,
    VPXD_GET_LAST_QUANTIZER = 267,
    VP9D_SET_ROW_MT = 268,
    VP9D_SET_LOOP_FILTER_OPT = 269,
    VP8_DECODER_CTRL_ID_MAX = 270,
}
pub type vpx_decrypt_cb = ::std::option::Option<
    unsafe extern "C" fn(
        decrypt_state: *mut ::std::os::raw::c_void,
        input: *const ::std::os::raw::c_uchar,
        output: *mut ::std::os::raw::c_uchar,
        count: ::std::os::raw::c_int,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vpx_decrypt_init {
    pub decrypt_cb: vpx_decrypt_cb,
    pub decrypt_state: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vpx_decrypt_init"][::std::mem::size_of::<vpx_decrypt_init>() - 16usize];
    ["Alignment of vpx_decrypt_init"][::std::mem::align_of::<vpx_decrypt_init>() - 8usize];
    ["Offset of field: vpx_decrypt_init::decrypt_cb"][::std::mem::offset_of!(vpx_decrypt_init, decrypt_cb) - 0usize];
    ["Offset of field: vpx_decrypt_init::decrypt_state"][::std::mem::offset_of!(vpx_decrypt_init, decrypt_state) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vpx_codec_frame_buffer {
    pub data: *mut u8,
    pub size: usize,
    pub priv_: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vpx_codec_frame_buffer"][::std::mem::size_of::<vpx_codec_frame_buffer>() - 24usize];
    ["Alignment of vpx_codec_frame_buffer"][::std::mem::align_of::<vpx_codec_frame_buffer>() - 8usize];
    ["Offset of field: vpx_codec_frame_buffer::data"][::std::mem::offset_of!(vpx_codec_frame_buffer, data) - 0usize];
    ["Offset of field: vpx_codec_frame_buffer::size"][::std::mem::offset_of!(vpx_codec_frame_buffer, size) - 8usize];
    ["Offset of field: vpx_codec_frame_buffer::priv_"][::std::mem::offset_of!(vpx_codec_frame_buffer, priv_) - 16usize];
};
pub type vpx_codec_frame_buffer_t = vpx_codec_frame_buffer;
pub type vpx_get_frame_buffer_cb_fn_t = ::std::option::Option<
    unsafe extern "C" fn(priv_: *mut ::std::os::raw::c_void, min_size: usize, fb: *mut vpx_codec_frame_buffer_t) -> ::std::os::raw::c_int,
>;
pub type vpx_release_frame_buffer_cb_fn_t =
    ::std::option::Option<unsafe extern "C" fn(priv_: *mut ::std::os::raw::c_void, fb: *mut vpx_codec_frame_buffer_t) -> ::std::os::raw::c_int>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vpx_codec_stream_info {
    pub sz: ::std::os::raw::c_uint,
    pub w: ::std::os::raw::c_uint,
    pub h: ::std::os::raw::c_uint,
    pub is_kf: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vpx_codec_stream_info"][::std::mem::size_of::<vpx_codec_stream_info>() - 16usize];
    ["Alignment of vpx_codec_stream_info"][::std::mem::align_of::<vpx_codec_stream_info>() - 4usize];
    ["Offset of field: vpx_codec_stream_info::sz"][::std::mem::offset_of!(vpx_codec_stream_info, sz) - 0usize];
    ["Offset of field: vpx_codec_stream_info::w"][::std::mem::offset_of!(vpx_codec_stream_info, w) - 4usize];
    ["Offset of field: vpx_codec_stream_info::h"][::std::mem::offset_of!(vpx_codec_stream_info, h) - 8usize];
    ["Offset of field: vpx_codec_stream_info::is_kf"][::std::mem::offset_of!(vpx_codec_stream_info, is_kf) - 12usize];
};
pub type vpx_codec_stream_info_t = vpx_codec_stream_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vpx_codec_dec_cfg {
    pub threads: ::std::os::raw::c_uint,
    pub w: ::std::os::raw::c_uint,
    pub h: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vpx_codec_dec_cfg"][::std::mem::size_of::<vpx_codec_dec_cfg>() - 12usize];
    ["Alignment of vpx_codec_dec_cfg"][::std::mem::align_of::<vpx_codec_dec_cfg>() - 4usize];
    ["Offset of field: vpx_codec_dec_cfg::threads"][::std::mem::offset_of!(vpx_codec_dec_cfg, threads) - 0usize];
    ["Offset of field: vpx_codec_dec_cfg::w"][::std::mem::offset_of!(vpx_codec_dec_cfg, w) - 4usize];
    ["Offset of field: vpx_codec_dec_cfg::h"][::std::mem::offset_of!(vpx_codec_dec_cfg, h) - 8usize];
};
pub type vpx_codec_dec_cfg_t = vpx_codec_dec_cfg;
unsafe extern "C" {
    pub fn vpx_codec_dec_init_ver(
        ctx: *mut vpx_codec_ctx_t,
        iface: *const vpx_codec_iface,
        cfg: *const vpx_codec_dec_cfg_t,
        flags: vpx_codec_flags_t,
        ver: ::std::os::raw::c_int,
    ) -> vpx_codec_err_t;
}
unsafe extern "C" {
    pub fn vpx_codec_peek_stream_info(
        iface: *const vpx_codec_iface,
        data: *const u8,
        data_sz: ::std::os::raw::c_uint,
        si: *mut vpx_codec_stream_info_t,
    ) -> vpx_codec_err_t;
}
unsafe extern "C" {
    pub fn vpx_codec_get_stream_info(ctx: *mut vpx_codec_ctx_t, si: *mut vpx_codec_stream_info_t) -> vpx_codec_err_t;
}
unsafe extern "C" {
    pub fn vpx_codec_decode(
        ctx: *mut vpx_codec_ctx_t,
        data: *const u8,
        data_sz: ::std::os::raw::c_uint,
        user_priv: *mut ::std::os::raw::c_void,
        deadline: ::std::os::raw::c_long,
    ) -> vpx_codec_err_t;
}
unsafe extern "C" {
    pub fn vpx_codec_get_frame(ctx: *mut vpx_codec_ctx_t, iter: *mut vpx_codec_iter_t) -> *mut vpx_image_t;
}
pub type vpx_codec_put_frame_cb_fn_t = ::std::option::Option<unsafe extern "C" fn(user_priv: *mut ::std::os::raw::c_void, img: *const vpx_image_t)>;
unsafe extern "C" {
    pub fn vpx_codec_register_put_frame_cb(
        ctx: *mut vpx_codec_ctx_t,
        cb: vpx_codec_put_frame_cb_fn_t,
        user_priv: *mut ::std::os::raw::c_void,
    ) -> vpx_codec_err_t;
}
pub type vpx_codec_put_slice_cb_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        user_priv: *mut ::std::os::raw::c_void,
        img: *const vpx_image_t,
        valid: *const vpx_image_rect_t,
        update: *const vpx_image_rect_t,
    ),
>;
unsafe extern "C" {
    pub fn vpx_codec_register_put_slice_cb(
        ctx: *mut vpx_codec_ctx_t,
        cb: vpx_codec_put_slice_cb_fn_t,
        user_priv: *mut ::std::os::raw::c_void,
    ) -> vpx_codec_err_t;
}
unsafe extern "C" {
    pub fn vpx_codec_set_frame_buffer_functions(
        ctx: *mut vpx_codec_ctx_t,
        cb_get: vpx_get_frame_buffer_cb_fn_t,
        cb_release: vpx_release_frame_buffer_cb_fn_t,
        cb_priv: *mut ::std::os::raw::c_void,
    ) -> vpx_codec_err_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
